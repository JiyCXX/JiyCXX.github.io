<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySql 数据类型 学习笔记</title>
      <link href="/2018/12/14/MySqlStudy4/"/>
      <url>/2018/12/14/MySqlStudy4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL中的数据类型"><a href="#1-MySQL中的数据类型" class="headerlink" title="1. MySQL中的数据类型"></a>1. MySQL中的数据类型</h2><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table><h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h2><h3 id="2-1-类型介绍"><a href="#2-1-类型介绍" class="headerlink" title="2.1 类型介绍"></a>2.1 类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p><p>它们的区别如下表所示：</p><table><thead><tr><th><strong>整数类型</strong></th><th><strong>字节</strong></th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="2-2-可选属性"><a href="#2-2-可选属性" class="headerlink" title="2.2 可选属性"></a>2.2 可选属性</h3><p><strong>整数类型的可选属性有三个：</strong></p><h4 id="2-2-1-M"><a href="#2-2-1-M" class="headerlink" title="2.2.1 M"></a>2.2.1 M</h4><p><code>M</code>: 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用字符填满宽度。该项功能需要配合“<code>ZEROFILL</code>”使用，表示用“0”填满宽度，否则指定显示宽度无效。</p><p>如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即<code>显示宽度与类型可以存储的值范围无关</code>。<strong>从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。</strong></p><p>整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 数据处理增删改查 学习笔记</title>
      <link href="/2018/12/13/MySqlStudy3/"/>
      <url>/2018/12/13/MySqlStudy3/</url>
      
        <content type="html"><![CDATA[<h1 id="数据处理增删改查练习"><a href="#数据处理增删改查练习" class="headerlink" title="数据处理增删改查练习"></a>数据处理增删改查练习</h1><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="1、创建数据库test01-library"><a href="#1、创建数据库test01-library" class="headerlink" title="1、创建数据库test01_library"></a>1、创建数据库test01_library</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test01_library CHARACTER SET <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">USE test01_library;</span><br></pre></td></tr></table></figure><h2 id="2、创建表-books，表结构如下："><a href="#2、创建表-books，表结构如下：" class="headerlink" title="2、创建表 books，表结构如下："></a>2、创建表 books，表结构如下：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS books(</span><br><span class="line">id INT,</span><br><span class="line">`name` VARCHAR(50),</span><br><span class="line">`authors` VARCHAR(100),</span><br><span class="line">price FLOAT,</span><br><span class="line">pubdate YEAR,</span><br><span class="line">note VARCHAR(100),</span><br><span class="line">num INT</span><br><span class="line">);</span><br><span class="line">SHOW TABLES FROM test01_library;</span><br><span class="line">DESC books;</span><br></pre></td></tr></table></figure><h2 id="3、向books表中插入记录"><a href="#3、向books表中插入记录" class="headerlink" title="3、向books表中插入记录"></a>3、向books表中插入记录</h2><h3 id="1）不指定字段名称，插入第一条记录"><a href="#1）不指定字段名称，插入第一条记录" class="headerlink" title="1）不指定字段名称，插入第一条记录"></a>1）不指定字段名称，插入第一条记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO books</span><br><span class="line">VALUE(1,<span class="string">&#x27;Tal of AAA&#x27;</span>,<span class="string">&#x27;Dickes&#x27;</span>,23,1995,<span class="string">&#x27;novel&#x27;</span>,11);</span><br></pre></td></tr></table></figure><h3 id="2）指定所有字段名称，插入第二记录"><a href="#2）指定所有字段名称，插入第二记录" class="headerlink" title="2）指定所有字段名称，插入第二记录"></a>2）指定所有字段名称，插入第二记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO books (id,NAME,`authors`,price,pubdate,note,num)</span><br><span class="line">VALUE(2,<span class="string">&#x27;EmmaT&#x27;</span>,<span class="string">&#x27;Jane lura&#x27;</span>,35,1993,<span class="string">&#x27;Joke&#x27;</span>,22);</span><br><span class="line"></span><br><span class="line">SELECT *FROM books;</span><br></pre></td></tr></table></figure><h3 id="3）同时插入多条记录（剩下的所有记录）"><a href="#3）同时插入多条记录（剩下的所有记录）" class="headerlink" title="3）同时插入多条记录（剩下的所有记录）"></a>3）同时插入多条记录（剩下的所有记录）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO books (id,NAME,`authors`,price,pubdate,note,num) VALUES</span><br><span class="line">(3,<span class="string">&#x27;Story of Jane&#x27;</span>,<span class="string">&#x27;Jane Tim&#x27;</span>,40,2001,<span class="string">&#x27;novel&#x27;</span>,0),</span><br><span class="line">(4,<span class="string">&#x27;Lovey Day&#x27;</span>,<span class="string">&#x27;George Byron&#x27;</span>,20,2005,<span class="string">&#x27;novel&#x27;</span>,30),</span><br><span class="line">(5,<span class="string">&#x27;Old land&#x27;</span>,<span class="string">&#x27;Honore Blade&#x27;</span>,30,2010,<span class="string">&#x27;Law&#x27;</span>,0),</span><br><span class="line">(6,<span class="string">&#x27;The Battle&#x27;</span>,<span class="string">&#x27;Upton Sara&#x27;</span>,30,1999,<span class="string">&#x27;medicine&#x27;</span>,40),</span><br><span class="line">(7,<span class="string">&#x27;Rose Hood&#x27;</span>,<span class="string">&#x27;Richard haggard&#x27;</span>,28,2008,<span class="string">&#x27;cartoon&#x27;</span>,28);</span><br></pre></td></tr></table></figure><h2 id="4、将小说类型-novel-的书的价格都增加5。"><a href="#4、将小说类型-novel-的书的价格都增加5。" class="headerlink" title="4、将小说类型(novel)的书的价格都增加5。"></a>4、将小说类型(novel)的书的价格都增加5。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE books SET price=price+5 </span><br><span class="line">WHERE note =<span class="string">&#x27;novel&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="5、将名称为EmmaT的书的价格改为40，并将说明改为drama。"><a href="#5、将名称为EmmaT的书的价格改为40，并将说明改为drama。" class="headerlink" title="5、将名称为EmmaT的书的价格改为40，并将说明改为drama。"></a>5、将名称为EmmaT的书的价格改为40，并将说明改为drama。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE books </span><br><span class="line">SET price=40,note=<span class="string">&#x27;drama&#x27;</span></span><br><span class="line">WHERE `name`=<span class="string">&#x27;EmmaT&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="6、删除库存为0的记录。"><a href="#6、删除库存为0的记录。" class="headerlink" title="6、删除库存为0的记录。"></a>6、删除库存为0的记录。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETE FROM books</span><br><span class="line">WHERE num=0;</span><br></pre></td></tr></table></figure><h2 id="7、统计书名中包含a字母的书"><a href="#7、统计书名中包含a字母的书" class="headerlink" title="7、统计书名中包含a字母的书"></a>7、统计书名中包含a字母的书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT NAME </span><br><span class="line">FROM books </span><br><span class="line">WHERE NAME LIKE <span class="string">&#x27;%a</span></span><br></pre></td></tr></table></figure><h2 id="8、统计书名中包含a字母的书的数量和库存总量"><a href="#8、统计书名中包含a字母的书的数量和库存总量" class="headerlink" title="8、统计书名中包含a字母的书的数量和库存总量"></a>8、统计书名中包含a字母的书的数量和库存总量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*),SUM(num)</span><br><span class="line">FROM books</span><br><span class="line">WHERE NAME LIKE <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="9、找出“novel”类型的书，按照价格降序排列"><a href="#9、找出“novel”类型的书，按照价格降序排列" class="headerlink" title="9、找出“novel”类型的书，按照价格降序排列"></a>9、找出“novel”类型的书，按照价格降序排列</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT`name`,note,price</span><br><span class="line">FROM books</span><br><span class="line">WHERE note =<span class="string">&#x27;novel&#x27;</span></span><br><span class="line">ORDER BY price DESC;</span><br></pre></td></tr></table></figure><h2 id="10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列"><a href="#10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列" class="headerlink" title="10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列"></a>10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">ORDER BY num DESC,note ASC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11、按照note分类统计书的数量"><a href="#11、按照note分类统计书的数量" class="headerlink" title="11、按照note分类统计书的数量"></a>11、按照note分类统计书的数量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT note,COUNT(*)</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12、按照note分类统计书的库存量，显示库存量超过30本的"><a href="#12、按照note分类统计书的库存量，显示库存量超过30本的" class="headerlink" title="12、按照note分类统计书的库存量，显示库存量超过30本的"></a>12、按照note分类统计书的库存量，显示库存量超过30本的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT note,SUM(num)</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note</span><br><span class="line">HAVING SUM(num)&gt;30;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13、查询所有图书，每页显示5本，显示第二页"><a href="#13、查询所有图书，每页显示5本，显示第二页" class="headerlink" title="13、查询所有图书，每页显示5本，显示第二页"></a>13、查询所有图书，每页显示5本，显示第二页</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">LIMIT 5,5;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14、按照note分类统计书的库存量，显示库存量最多的"><a href="#14、按照note分类统计书的库存量，显示库存量最多的" class="headerlink" title="14、按照note分类统计书的库存量，显示库存量最多的"></a>14、按照note分类统计书的库存量，显示库存量最多的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT note,SUM(num)sum_num</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note</span><br><span class="line">ORDER BY sum_num DESC</span><br><span class="line">LIMIT 0,1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15、查询书名达到10个字符的书，不包括里面的空格"><a href="#15、查询书名达到10个字符的书，不包括里面的空格" class="headerlink" title="15、查询书名达到10个字符的书，不包括里面的空格"></a>15、查询书名达到10个字符的书，不包括里面的空格</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(REPLACE(NAME,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">FROM books</span><br><span class="line"></span><br><span class="line">SELECT NAME </span><br><span class="line">FROM books</span><br><span class="line">WHERE CHAR_LENGTH(REPLACE(NAME,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)) &gt;=10</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话"><a href="#16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话" class="headerlink" title="16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话"></a>16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT NAME,note, CASE note WHEN <span class="string">&#x27;novel&#x27;</span> THEN <span class="string">&#x27;小说&#x27;</span></span><br><span class="line">   WHEN <span class="string">&#x27;law&#x27;</span> THEN <span class="string">&#x27;法律&#x27;</span></span><br><span class="line">   WHEN <span class="string">&#x27;medicine&#x27;</span> THEN <span class="string">&#x27;医药&#x27;</span></span><br><span class="line">   WHEN <span class="string">&#x27;cartoon&#x27;</span> THEN <span class="string">&#x27;卡通&#x27;</span></span><br><span class="line">   WHEN <span class="string">&#x27;joke&#x27;</span> THEN <span class="string">&#x27;笑话&#x27;</span></span><br><span class="line">   ELSE <span class="string">&#x27;其他&#x27;</span></span><br><span class="line">   END AS <span class="string">&quot;类型&quot;</span></span><br><span class="line">FROM books;</span><br></pre></td></tr></table></figure><h2 id="17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货"><a href="#17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货" class="headerlink" title="17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货"></a>17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT NAME,num,CASE num WHEN num&gt;30 THEN <span class="string">&#x27;滞销&#x27;</span></span><br><span class="line"> WHEN num&gt;0 AND num&lt;10 THEN <span class="string">&#x27;畅销&#x27;</span></span><br><span class="line"> WHEN num=0 THEN <span class="string">&#x27;无货&#x27;</span></span><br><span class="line"> ELSE <span class="string">&#x27;正常&#x27;</span></span><br><span class="line"> END AS <span class="string">&quot;库存状态&quot;</span> </span><br><span class="line">FROM books;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18、统计每一种note的库存量，并合计总量"><a href="#18、统计每一种note的库存量，并合计总量" class="headerlink" title="18、统计每一种note的库存量，并合计总量"></a>18、统计每一种note的库存量，并合计总量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT note,SUM(num)</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note WITH ROLLUP;</span><br><span class="line"></span><br><span class="line">SELECT IFNULL(note,<span class="string">&#x27;合计库存总量&#x27;</span>) AS note,SUM(num)</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note WITH ROLLUP;</span><br></pre></td></tr></table></figure><h2 id="19、统计每一种note的数量，并合计总量"><a href="#19、统计每一种note的数量，并合计总量" class="headerlink" title="19、统计每一种note的数量，并合计总量"></a>19、统计每一种note的数量，并合计总量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT IFNULL(note,<span class="string">&#x27;合计总量&#x27;</span>) AS note,COUNT(*)</span><br><span class="line">FROM books</span><br><span class="line">GROUP BY note WITH ROLLUP;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="20、统计库存量前三名的图书"><a href="#20、统计库存量前三名的图书" class="headerlink" title="20、统计库存量前三名的图书"></a>20、统计库存量前三名的图书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">ORDER BY num DESC</span><br><span class="line">LIMIT 0,3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="21、找出最早出版的一本书"><a href="#21、找出最早出版的一本书" class="headerlink" title="21、找出最早出版的一本书"></a>21、找出最早出版的一本书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">ORDER BY pubdate ASC</span><br><span class="line">LIMIT 0,1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="22、找出novel中价格最高的一本书"><a href="#22、找出novel中价格最高的一本书" class="headerlink" title="22、找出novel中价格最高的一本书"></a>22、找出novel中价格最高的一本书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">WHERE note=<span class="string">&#x27;novel&#x27;</span></span><br><span class="line">ORDER BY price DESC</span><br><span class="line">LIMIT 0,1;</span><br></pre></td></tr></table></figure><h2 id="23、找出书名中字数最多的一本书，不含空格"><a href="#23、找出书名中字数最多的一本书，不含空格" class="headerlink" title="23、找出书名中字数最多的一本书，不含空格"></a>23、找出书名中字数最多的一本书，不含空格</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT REPLACE(NAME,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">FROM books</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM books</span><br><span class="line">ORDER BY CHAR_LENGTH(REPLACE(NAME,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)) DESC</span><br><span class="line">LIMIT 0,1;</span><br></pre></td></tr></table></figure><h1 id="数据处理之增删改的课后练习"><a href="#数据处理之增删改的课后练习" class="headerlink" title="数据处理之增删改的课后练习"></a>数据处理之增删改的课后练习</h1><h1 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h1><h2 id="1-创建数据库dbtest11"><a href="#1-创建数据库dbtest11" class="headerlink" title="1. 创建数据库dbtest11"></a>1. 创建数据库dbtest11</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS dbtest11 CHARACTER SET <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="2-运行以下脚本创建表my-employees"><a href="#2-运行以下脚本创建表my-employees" class="headerlink" title="2. 运行以下脚本创建表my_employees"></a>2. 运行以下脚本创建表my_employees</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USE dbtest11;</span><br><span class="line"></span><br><span class="line">CREATE TABLE my_employees(</span><br><span class="line">id INT(10),</span><br><span class="line">first_name VARCHAR(10),</span><br><span class="line">last_name VARCHAR(10),</span><br><span class="line">userid VARCHAR(10),</span><br><span class="line">salary DOUBLE(10,2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE users(</span><br><span class="line">id INT,</span><br><span class="line">userid VARCHAR(10),</span><br><span class="line">department_id INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="3-显示表my-employees的结构"><a href="#3-显示表my-employees的结构" class="headerlink" title="3.显示表my_employees的结构"></a>3.显示表my_employees的结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DESC my_employees;</span><br><span class="line"></span><br><span class="line">DESC users;</span><br></pre></td></tr></table></figure><h2 id="4-向my-employees表中插入下列数据"><a href="#4-向my-employees表中插入下列数据" class="headerlink" title="4.向my_employees表中插入下列数据"></a>4.向my_employees表中插入下列数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*IDFIRST_NAMELAST_NAMEUSERIDSALARY</span><br><span class="line">1patelRalphRpatel895</span><br><span class="line">2DancsBettyBdancs860</span><br><span class="line">3BiriBenBbiri1100</span><br><span class="line">4NewmanChadCnewman750</span><br><span class="line">5RopeburnAudreyAropebur1550</span><br><span class="line">*/</span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">VALUES(1,<span class="string">&#x27;patel&#x27;</span>,<span class="string">&#x27;Ralph&#x27;</span>,<span class="string">&#x27;Rpatel&#x27;</span>,895);</span><br><span class="line"></span><br><span class="line">INSERT INTO my_employees VALUES</span><br><span class="line">(2,<span class="string">&#x27;Dancs&#x27;</span>,<span class="string">&#x27;Betty&#x27;</span>,<span class="string">&#x27;Bdancs&#x27;</span>,860),</span><br><span class="line">(3,<span class="string">&#x27;Biri&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;Bbiri&#x27;</span>,1100),</span><br><span class="line">(4,<span class="string">&#x27;Newman&#x27;</span>,<span class="string">&#x27;Chad&#x27;</span>,<span class="string">&#x27;Cnewman&#x27;</span>,750),</span><br><span class="line">(5,<span class="string">&#x27;Ropeburn&#x27;</span>,<span class="string">&#x27;Audrey&#x27;</span>,<span class="string">&#x27;Aropebur&#x27;</span>,1550);</span><br><span class="line"></span><br><span class="line">SELECT * FROM my_employees;</span><br><span class="line"></span><br><span class="line">DELETE FROM my_employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2：</span></span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">SELECT 1,<span class="string">&#x27;patel&#x27;</span>,<span class="string">&#x27;Ralph&#x27;</span>,<span class="string">&#x27;Rpatel&#x27;</span>,895 UNION ALL</span><br><span class="line">SELECT 2,<span class="string">&#x27;Dancs&#x27;</span>,<span class="string">&#x27;Betty&#x27;</span>,<span class="string">&#x27;Bdancs&#x27;</span>,860 UNION ALL</span><br><span class="line">SELECT 3,<span class="string">&#x27;Biri&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;Bbiri&#x27;</span>,1100 UNION ALL</span><br><span class="line">SELECT 4,<span class="string">&#x27;Newman&#x27;</span>,<span class="string">&#x27;Chad&#x27;</span>,<span class="string">&#x27;Cnewman&#x27;</span>,750 UNION ALL</span><br><span class="line">SELECT 5,<span class="string">&#x27;Ropeburn&#x27;</span>,<span class="string">&#x27;Audrey&#x27;</span>,<span class="string">&#x27;Aropebur&#x27;</span>,1550;</span><br></pre></td></tr></table></figure><h2 id="5-向users表中插入数据"><a href="#5-向users表中插入数据" class="headerlink" title="5.向users表中插入数据"></a>5.向users表中插入数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*1Rpatel10</span><br><span class="line">2Bdancs10</span><br><span class="line">3Bbiri20</span><br><span class="line">4Cnewman30</span><br><span class="line">5</span><br><span class="line">Aropebur40</span><br><span class="line">*/</span><br><span class="line">INSERT INTO users VALUES</span><br><span class="line">(1,<span class="string">&#x27;Rpatel&#x27;</span>,10),</span><br><span class="line">(2,<span class="string">&#x27;Bdancs&#x27;</span>,10),</span><br><span class="line">(3,<span class="string">&#x27;Bbiri&#x27;</span>,20),</span><br><span class="line">(4,<span class="string">&#x27;Cnewman&#x27;</span>,30),</span><br><span class="line">(5,<span class="string">&#x27;Aropebur&#x27;</span>,40)</span><br><span class="line"></span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><h2 id="6-将3号员工的last-name修改为“drelxer”"><a href="#6-将3号员工的last-name修改为“drelxer”" class="headerlink" title="6. 将3号员工的last_name修改为“drelxer”"></a>6. 将3号员工的last_name修改为“drelxer”</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE my_employees</span><br><span class="line">SET last_name=<span class="string">&#x27;drelxer&#x27;</span></span><br><span class="line">WHERE id =3;</span><br><span class="line"></span><br><span class="line">SELECT * FROM my_employees;</span><br></pre></td></tr></table></figure><h2 id="7-将所有工资少于900的员工的工资修改为1000"><a href="#7-将所有工资少于900的员工的工资修改为1000" class="headerlink" title="7. 将所有工资少于900的员工的工资修改为1000"></a>7. 将所有工资少于900的员工的工资修改为1000</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE my_employees</span><br><span class="line">SET salary =1000</span><br><span class="line">WHERE salary &lt;900;</span><br></pre></td></tr></table></figure><h2 id="8-将userid为Bbiri的users表和my-employees表的记录全部删除"><a href="#8-将userid为Bbiri的users表和my-employees表的记录全部删除" class="headerlink" title="8. 将userid为Bbiri的users表和my_employees表的记录全部删除"></a>8. 将userid为Bbiri的users表和my_employees表的记录全部删除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式1：</span></span><br><span class="line">DELETE FROM my_employees</span><br><span class="line">WHERE userid = <span class="string">&#x27;Bbiri&#x27;</span>;</span><br><span class="line"></span><br><span class="line">DELETE FROM users</span><br><span class="line">WHERE userid = <span class="string">&#x27;Bbiri&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2：</span></span><br><span class="line"></span><br><span class="line">DELETE m,u</span><br><span class="line">FROM my_employees m</span><br><span class="line">JOIN users u</span><br><span class="line">ON m.userid = u.userid</span><br><span class="line">WHERE m.userid = <span class="string">&#x27;Bbiri&#x27;</span>;</span><br><span class="line"></span><br><span class="line">SELECT * FROM my_employees;</span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><h2 id="9-删除my-employees、users表所有数据"><a href="#9-删除my-employees、users表所有数据" class="headerlink" title="9. 删除my_employees、users表所有数据"></a>9. 删除my_employees、users表所有数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETE FROM my_employees;</span><br><span class="line">DELETE FROM users;</span><br></pre></td></tr></table></figure><h2 id="10-检查所作的修正"><a href="#10-检查所作的修正" class="headerlink" title="10. 检查所作的修正"></a>10. 检查所作的修正</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM my_employees;</span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><h2 id="11-清空表my-employees"><a href="#11-清空表my-employees" class="headerlink" title="11. 清空表my_employees"></a>11. 清空表my_employees</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE my_employees;</span><br></pre></td></tr></table></figure><h1 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h1><h2 id="1-使用现有数据库dbtest11"><a href="#1-使用现有数据库dbtest11" class="headerlink" title="1. 使用现有数据库dbtest11"></a>1. 使用现有数据库dbtest11</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USE dbtest11;</span><br></pre></td></tr></table></figure><h2 id="2-创建表格pet"><a href="#2-创建表格pet" class="headerlink" title="2. 创建表格pet"></a>2. 创建表格pet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE pet(</span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line">OWNER VARCHAR(20),</span><br><span class="line">species VARCHAR(20),</span><br><span class="line">sex CHAR(1),</span><br><span class="line">birth YEAR,</span><br><span class="line">death YEAR</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC pet;</span><br></pre></td></tr></table></figure><h2 id="3-添加记录"><a href="#3-添加记录" class="headerlink" title="3. 添加记录"></a>3. 添加记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO pet VALUES</span><br><span class="line">(<span class="string">&#x27;Fluffy&#x27;</span>,<span class="string">&#x27;harold&#x27;</span>,<span class="string">&#x27;Cat&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;2003&#x27;</span>,<span class="string">&#x27;2010&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Claws&#x27;</span>,<span class="string">&#x27;gwen&#x27;</span>,<span class="string">&#x27;Cat&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;2004&#x27;</span>,NULL),</span><br><span class="line">(<span class="string">&#x27;Buffy&#x27;</span>,NULL,<span class="string">&#x27;Dog&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;2009&#x27;</span>,NULL),</span><br><span class="line">(<span class="string">&#x27;Fang&#x27;</span>,<span class="string">&#x27;benny&#x27;</span>,<span class="string">&#x27;Dog&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,NULL),</span><br><span class="line">(<span class="string">&#x27;bowser&#x27;</span>,<span class="string">&#x27;diane&#x27;</span>,<span class="string">&#x27;Dog&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;2003&#x27;</span>,<span class="string">&#x27;2009&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Chirpy&#x27;</span>,NULL,<span class="string">&#x27;Bird&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;2008&#x27;</span>,NULL);</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM pet;</span><br></pre></td></tr></table></figure><h2 id="4-添加字段-主人的生日owner-birth-DATE类型。"><a href="#4-添加字段-主人的生日owner-birth-DATE类型。" class="headerlink" title="4. 添加字段:主人的生日owner_birth DATE类型。"></a>4. 添加字段:主人的生日owner_birth DATE类型。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE pet </span><br><span class="line">ADD COLUMN owner_birth DATE;</span><br></pre></td></tr></table></figure><h2 id="5-将名称为Claws的猫的主人改为kevin"><a href="#5-将名称为Claws的猫的主人改为kevin" class="headerlink" title="5. 将名称为Claws的猫的主人改为kevin"></a>5. 将名称为Claws的猫的主人改为kevin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE pet</span><br><span class="line">SET `owner`=<span class="string">&#x27;kevin&#x27;</span></span><br><span class="line">WHERE `name`=<span class="string">&#x27;Claws&#x27;</span> AND species =<span class="string">&#x27;Cat&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="6-将没有死的狗的主人改为duck"><a href="#6-将没有死的狗的主人改为duck" class="headerlink" title="6. 将没有死的狗的主人改为duck"></a>6. 将没有死的狗的主人改为duck</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE pet </span><br><span class="line">SET OWNER =<span class="string">&#x27;duck&#x27;</span></span><br><span class="line">WHERE death IS NULL AND species =<span class="string">&#x27;dog&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-查询没有主人的宠物的名字；"><a href="#7-查询没有主人的宠物的名字；" class="headerlink" title="7. 查询没有主人的宠物的名字；"></a>7. 查询没有主人的宠物的名字；</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT NAME</span><br><span class="line">FROM pet</span><br><span class="line">WHERE OWNER IS NULL;</span><br></pre></td></tr></table></figure><h2 id="8-查询已经死了的cat的姓名，主人，以及去世时间；"><a href="#8-查询已经死了的cat的姓名，主人，以及去世时间；" class="headerlink" title="8. 查询已经死了的cat的姓名，主人，以及去世时间；"></a>8. 查询已经死了的cat的姓名，主人，以及去世时间；</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT NAME,OWNER,death</span><br><span class="line">FROM pet</span><br><span class="line">WHERE death IS NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="9-删除已经死亡的狗"><a href="#9-删除已经死亡的狗" class="headerlink" title="9. 删除已经死亡的狗"></a>9. 删除已经死亡的狗</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETE FROM pet</span><br><span class="line">WHERE death IS NOT NULL </span><br><span class="line">AND species = <span class="string">&#x27;Dog&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="10-查询所有宠物信息"><a href="#10-查询所有宠物信息" class="headerlink" title="10. 查询所有宠物信息"></a>10. 查询所有宠物信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM pet;</span><br></pre></td></tr></table></figure><h1 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h1><h2 id="1-使用已有的数据库dbtest11"><a href="#1-使用已有的数据库dbtest11" class="headerlink" title="1. 使用已有的数据库dbtest11"></a>1. 使用已有的数据库dbtest11</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USE dbtest11;</span><br></pre></td></tr></table></figure><h2 id="2-创建表employee，并添加记录"><a href="#2-创建表employee，并添加记录" class="headerlink" title="2. 创建表employee，并添加记录"></a>2. 创建表employee，并添加记录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employee(</span><br><span class="line">id INT,</span><br><span class="line">NAME VARCHAR(15),</span><br><span class="line">sex CHAR(1),</span><br><span class="line">tel VARCHAR(25),</span><br><span class="line">addr VARCHAR(35),</span><br><span class="line">salary DOUBLE(10,2)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO employee VALUES</span><br><span class="line">(10001,<span class="string">&#x27;张一一&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;13456789000&#x27;</span>,<span class="string">&#x27;山东青岛&#x27;</span>,1001.58),</span><br><span class="line">(10002,<span class="string">&#x27;刘小红&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;13454319000&#x27;</span>,<span class="string">&#x27;河北保定&#x27;</span>,1201.21),</span><br><span class="line">(10003,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;0751-1234567&#x27;</span>,<span class="string">&#x27;广东佛山&#x27;</span>,1004.11),</span><br><span class="line">(10004,<span class="string">&#x27;刘小强&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;0755-5555555&#x27;</span>,<span class="string">&#x27;广东深圳&#x27;</span>,1501.23),</span><br><span class="line">(10005,<span class="string">&#x27;王艳&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;020-1232133&#x27;</span>,<span class="string">&#x27;广东广州&#x27;</span>,1405.16);</span><br><span class="line"></span><br><span class="line">SELECT * FROM employee;</span><br></pre></td></tr></table></figure><h2 id="3-查询出薪资在1200-1300之间的员工信息。"><a href="#3-查询出薪资在1200-1300之间的员工信息。" class="headerlink" title="3. 查询出薪资在1200~1300之间的员工信息。"></a>3. 查询出薪资在1200~1300之间的员工信息。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employee</span><br><span class="line">WHERE salary BETWEEN 1200 AND 1300;</span><br></pre></td></tr></table></figure><h2 id="4-查询出姓“刘”的员工的工号，姓名，家庭住址。"><a href="#4-查询出姓“刘”的员工的工号，姓名，家庭住址。" class="headerlink" title="4. 查询出姓“刘”的员工的工号，姓名，家庭住址。"></a>4. 查询出姓“刘”的员工的工号，姓名，家庭住址。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT id,NAME,addr</span><br><span class="line">FROM employee</span><br><span class="line">WHERE NAME LIKE <span class="string">&#x27;刘%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-将“李四”的家庭住址改为“广东韶关”"><a href="#5-将“李四”的家庭住址改为“广东韶关”" class="headerlink" title="5. 将“李四”的家庭住址改为“广东韶关”"></a>5. 将“李四”的家庭住址改为“广东韶关”</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE employee</span><br><span class="line">SET addr = <span class="string">&#x27;广东韶关&#x27;</span></span><br><span class="line">WHERE NAME = <span class="string">&#x27;李四&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="6-查询出名字中带“小”的员工"><a href="#6-查询出名字中带“小”的员工" class="headerlink" title="6. 查询出名字中带“小”的员工"></a>6. 查询出名字中带“小”的员工</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employee</span><br><span class="line">WHERE NAME LIKE <span class="string">&#x27;%小%&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 排序与分页 学习笔记</title>
      <link href="/2018/12/12/MySql3/"/>
      <url>/2018/12/12/MySql3/</url>
      
        <content type="html"><![CDATA[<h1 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h1><hr><h2 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1. 排序数据"></a>1. 排序数据</h2><h3 id="1-1-排序规则"><a href="#1-1-排序规则" class="headerlink" title="1.1 排序规则"></a>1.1 排序规则</h3><ul><li>使用 ORDER BY 子句排序<ul><li><strong>ASC（ascend）: 升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY 子句在SELECT语句的结尾。</strong></li></ul><h3 id="1-2-单列排序"><a href="#1-2-单列排序" class="headerlink" title="1.2 单列排序"></a>1.2 单列排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT   last_name, job_id, department_id, hire_date</span><br><span class="line">FROM     employees</span><br><span class="line">ORDER BY hire_date ;</span><br></pre></td></tr></table></figure><p> <img src="/img/images/1554974255957.png" alt="1554974255957"></p><p><img src="/img/images/1554974260133.png" alt="1554974260133"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT   last_name, job_id, department_id, hire_date</span><br><span class="line">FROM     employees</span><br><span class="line">ORDER BY hire_date DESC ;</span><br></pre></td></tr></table></figure><p> <img src="/img/images/1554974822229.png" alt="1554974822229"></p><p><img src="/img/images/1554974827522.png" alt="1554974827522"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name, salary*12 annsal</span><br><span class="line">FROM   employees</span><br><span class="line">ORDER BY annsal;</span><br></pre></td></tr></table></figure><p> <img src="/img/images/1554974853194.png" alt="1554974853194"></p><p><img src="/img/images/1554974858252.png" alt="1554974858252"></p><h3 id="1-3-多列排序"><a href="#1-3-多列排序" class="headerlink" title="1.3 多列排序"></a>1.3 多列排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name, department_id, salary</span><br><span class="line">FROM   employees</span><br><span class="line">ORDER BY department_id, salary DESC;</span><br></pre></td></tr></table></figure><p><img src="/img/images/1554974901572.png" alt="1554974901572"></p><p><img src="/img/images/1554974907498.png" alt="1554974907498"></p><ul><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h2><h3 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2.1 背景"></a>2.1 背景</h3><p>背景1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><h3 id="2-2-实现规则"><a href="#2-2-实现规则" class="headerlink" title="2.2 实现规则"></a>2.2 实现规则</h3><ul><li><p>分页原理</p><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p></li><li><p><strong>MySQL中使用 LIMIT 实现分页</strong></p></li><li><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT [位置偏移量,] 行数</span><br></pre></td></tr></table></figure><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></li><li><p>举例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--前10条记录：</span><br><span class="line">SELECT * FROM 表名 LIMIT 0,10;</span><br><span class="line">或者</span><br><span class="line">SELECT * FROM 表名 LIMIT 10;</span><br><span class="line"></span><br><span class="line">--第11至20条记录：</span><br><span class="line">SELECT * FROM 表名 LIMIT 10,10;</span><br><span class="line"></span><br><span class="line">--第21至30条记录： </span><br><span class="line">SELECT * FROM 表名 LIMIT 20,10;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式<strong>：（当前页数-1）*每页条数，每页条数</strong></li></ul><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table </span><br><span class="line">LIMIT(PageNo - 1)*PageSize,PageSize;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></li><li>使用 LIMIT 的好处</li></ul><p>约束返回结果的数量可以<code>减少数据表的网络传输量</code>，也可以<code>提升查询效率</code>。如果我们知道返回结果只有 1 条，就可以使用<code>LIMIT 1</code>，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h3 id="2-3-拓展"><a href="#2-3-拓展" class="headerlink" title="2.3 拓展"></a>2.3 拓展</h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关键字，而且需要放到 SELECT 语句的最后面。</p><ul><li>如果是 SQL Server 和 Access，需要使用 <code>TOP</code> 关键字，比如：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT TOP 5 name, hp_max FROM heros ORDER BY hp_max DESC</span><br></pre></td></tr></table></figure><ul><li>如果是 DB2，使用<code>FETCH FIRST 5 ROWS ONLY</code>这样的关键字：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT name, hp_max FROM heros ORDER BY hp_max DESC FETCH FIRST 5 ROWS ONLY</span><br></pre></td></tr></table></figure><ul><li>如果是 Oracle，你需要基于 <code>ROWNUM</code> 来统计行数：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT rownum,last_name,salary FROM employees WHERE rownum &lt; 5 ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p>需要说明的是，这条语句是先取出来前 5 条数据行，然后再按照 hp_max 从高到低的顺序进行排序。但这样产生的结果和上述方法的并不一样。我会在后面讲到子查询，你可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT rownum, last_name,salary</span><br><span class="line">FROM (</span><br><span class="line">    SELECT last_name,salary</span><br><span class="line">    FROM employees</span><br><span class="line">    ORDER BY salary DESC)</span><br><span class="line">WHERE rownum &lt; 10;</span><br></pre></td></tr></table></figure><p>得到与上述方法一致的结果。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 创建和管理表语句 学习笔记</title>
      <link href="/2018/12/12/MySqlStudy2/"/>
      <url>/2018/12/12/MySqlStudy2/</url>
      
        <content type="html"><![CDATA[<h1 id="创建和管理表的课后练习"><a href="#创建和管理表的课后练习" class="headerlink" title="创建和管理表的课后练习"></a>创建和管理表的课后练习</h1><h2 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h2><h3 id="1-创建数据库test01-office-指明字符集为utf-8并在此数据库执行下列操作"><a href="#1-创建数据库test01-office-指明字符集为utf-8并在此数据库执行下列操作" class="headerlink" title="1 创建数据库test01_office 指明字符集为utf-8并在此数据库执行下列操作"></a>1 创建数据库test01_office 指明字符集为utf-8并在此数据库执行下列操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS test01_office CHARACTER SET <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">USE test01_office;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建表 dept01</span></span><br><span class="line"><span class="comment">#字段  类型</span></span><br><span class="line"><span class="comment">#id     int7</span></span><br><span class="line"><span class="comment">#name   varchar25</span></span><br><span class="line">CREATE TABLE IF NOT EXISTS dept01(</span><br><span class="line">id INT(7),</span><br><span class="line">`name` VARCHAR(25)</span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SHOW TABLES</span><br><span class="line">SHOW TABLES FROM test01_office</span><br></pre></td></tr></table></figure><h3 id="2将表departments中的数据插入新表dept02"><a href="#2将表departments中的数据插入新表dept02" class="headerlink" title="2将表departments中的数据插入新表dept02"></a>2将表departments中的数据插入新表dept02</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE dept02</span><br><span class="line">AS</span><br><span class="line">SELECT * </span><br><span class="line">FROM atguigudb.`departments`;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM dept02;</span><br></pre></td></tr></table></figure><h3 id="创建表emp01"><a href="#创建表emp01" class="headerlink" title="创建表emp01"></a>创建表emp01</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字段        类型</span></span><br><span class="line"><span class="comment">#id            int7</span></span><br><span class="line"><span class="comment">#first_name     varchar25</span></span><br><span class="line"><span class="comment">#last_nmae       varchar25</span></span><br><span class="line"><span class="comment">#dept_id  int7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS emp01(</span><br><span class="line">id      INT(7),</span><br><span class="line">first_name VARCHAR(25),</span><br><span class="line">last_name VARCHAR(25),</span><br><span class="line">dept_id INT(7)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="将last-name-列长度增加到50"><a href="#将last-name-列长度增加到50" class="headerlink" title="将last_name 列长度增加到50"></a>将last_name 列长度增加到50</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DESC emp01;</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp01</span><br><span class="line">MODIFY last_name VARCHAR(50);</span><br></pre></td></tr></table></figure><h3 id="根据表employees创建emp02"><a href="#根据表employees创建emp02" class="headerlink" title="根据表employees创建emp02"></a>根据表employees创建emp02</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE emp02</span><br><span class="line">AS </span><br><span class="line">SELECT *</span><br><span class="line">FROM atguigudb.`employees`;</span><br><span class="line"></span><br><span class="line">SELECT *FROM emp02;</span><br></pre></td></tr></table></figure><h3 id="删除表emp01"><a href="#删除表emp01" class="headerlink" title="删除表emp01"></a>删除表emp01</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP TABLE emp01;</span><br></pre></td></tr></table></figure><h3 id="将表emp02重命名为emp01"><a href="#将表emp02重命名为emp01" class="headerlink" title="将表emp02重命名为emp01"></a>将表emp02重命名为emp01</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alter table emp02 rename to emp01</span></span><br><span class="line"></span><br><span class="line">RENAME TABLE emp02 TO emp01;</span><br></pre></td></tr></table></figure><h3 id="在表dept02和emp01中添加新列test-column-并检查所作的操作"><a href="#在表dept02和emp01中添加新列test-column-并检查所作的操作" class="headerlink" title="在表dept02和emp01中添加新列test_column 并检查所作的操作"></a>在表dept02和emp01中添加新列test_column 并检查所作的操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp01 ADD test_column VARCHAR(10);</span><br><span class="line"></span><br><span class="line">DESC emp01;</span><br><span class="line"></span><br><span class="line">ALTER TABLE dept02 ADD test_column VARCHAR(10);</span><br><span class="line"></span><br><span class="line">DESC dept02;</span><br></pre></td></tr></table></figure><h3 id="直接删除表emp01中的列department-id"><a href="#直接删除表emp01中的列department-id" class="headerlink" title="直接删除表emp01中的列department_id"></a>直接删除表emp01中的列department_id</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp01</span><br><span class="line">DROP COLUMN department_id;</span><br></pre></td></tr></table></figure><h2 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h2><h3 id="创建数据库test02-market"><a href="#创建数据库test02-market" class="headerlink" title="创建数据库test02_market"></a>创建数据库test02_market</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS test02_markets CHARACTER SET <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">USE test02_markets;</span><br><span class="line"></span><br><span class="line">SHOW CREATE DATABASE test02_markets;</span><br></pre></td></tr></table></figure><h3 id="创建数据表customers"><a href="#创建数据表customers" class="headerlink" title="创建数据表customers"></a>创建数据表customers</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE TABLE customers(</span><br><span class="line">c_num INT,</span><br><span class="line">c_name VARCHAR(50),</span><br><span class="line">c_contacr VARCHAR(50),</span><br><span class="line">c_city VARCHAR(50),</span><br><span class="line">c_birth DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW TABLES FROM test02_markets;</span><br></pre></td></tr></table></figure><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">CHANGE c_contacr c_contact VARCHAR(50);</span><br><span class="line"></span><br><span class="line">DESC customers;</span><br></pre></td></tr></table></figure><h3 id="将字段c-contact字段移动到c-birth字段后面"><a href="#将字段c-contact字段移动到c-birth字段后面" class="headerlink" title="将字段c_contact字段移动到c_birth字段后面"></a>将字段c_contact字段移动到c_birth字段后面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">MODIFY c_contact VARCHAR(50) AFTER c_birth;</span><br></pre></td></tr></table></figure><h3 id="将c-name-字段数据类型改为varchar70"><a href="#将c-name-字段数据类型改为varchar70" class="headerlink" title="将c_name 字段数据类型改为varchar70"></a>将c_name 字段数据类型改为varchar70</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">MODIFY c_name VARCHAR(70);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="将c-contact字段改名为c-phone"><a href="#将c-contact字段改名为c-phone" class="headerlink" title="将c_contact字段改名为c_phone"></a>将c_contact字段改名为c_phone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">CHANGE c_contact c_phone VARCHAR(70);</span><br><span class="line"></span><br><span class="line">ALTER TABLE customers </span><br><span class="line">MODIFY c_phone VARCHAR(50);</span><br></pre></td></tr></table></figure><h3 id="增加-c-gender-char1-字段到c-name-后面"><a href="#增加-c-gender-char1-字段到c-name-后面" class="headerlink" title="增加 c_gender char1 字段到c_name 后面"></a>增加 c_gender char1 字段到c_name 后面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers </span><br><span class="line">ADD c_gender CHAR(1) AFTER c_name;</span><br></pre></td></tr></table></figure><h3 id="将表名改为customers-info"><a href="#将表名改为customers-info" class="headerlink" title="将表名改为customers_info"></a>将表名改为customers_info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RENAME TABLE customers TO customers_info;</span><br><span class="line"></span><br><span class="line">DESC customers_info;</span><br></pre></td></tr></table></figure><h3 id="删除字段-c-city"><a href="#删除字段-c-city" class="headerlink" title="删除字段 c_city"></a>删除字段 c_city</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers_info</span><br><span class="line">DROP COLUMN c_city;</span><br></pre></td></tr></table></figure><h2 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test02_company CHARACTER SET <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建表offices</span></span><br><span class="line">USE test02_company;</span><br><span class="line"></span><br><span class="line">CREATE TABLE offices(</span><br><span class="line">officeCode  INT,</span><br><span class="line">city  VARCHAR(30),</span><br><span class="line">address VARCHAR(50),</span><br><span class="line">country VARCHAR(50),</span><br><span class="line">postalCode VARCHAR(25)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW TABLES FROM test02_company;</span><br><span class="line">DESC offices;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建表 employees</span></span><br><span class="line">CREATE TABLE employees(</span><br><span class="line">empNum INT,</span><br><span class="line">lastName VARCHAR(50),</span><br><span class="line">firstNmae VARCHAR(50),</span><br><span class="line">mobile VARCHAR(25),</span><br><span class="line">`code` INT,</span><br><span class="line">jobTitle VARCHAR(50),</span><br><span class="line">birth DATE,</span><br><span class="line">note VARCHAR(255),</span><br><span class="line">sex VARCHAR(5)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="将表employees中字段mobile修改到code后面"><a href="#将表employees中字段mobile修改到code后面" class="headerlink" title="将表employees中字段mobile修改到code后面"></a>将表employees中字段mobile修改到code后面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees </span><br><span class="line">MODIFY mobile VARCHAR(20) AFTER `code`;</span><br></pre></td></tr></table></figure><h3 id="将表employees中字段birth-改名为birthday"><a href="#将表employees中字段birth-改名为birthday" class="headerlink" title="将表employees中字段birth 改名为birthday"></a>将表employees中字段birth 改名为birthday</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">CHANGE birth birthday DATE;</span><br></pre></td></tr></table></figure><h3 id="修改sex字段-数据类型为-char1"><a href="#修改sex字段-数据类型为-char1" class="headerlink" title="修改sex字段 数据类型为    char1"></a>修改sex字段 数据类型为    char1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">MODIFY sex CHAR(1);</span><br></pre></td></tr></table></figure><h3 id="删除字段note"><a href="#删除字段note" class="headerlink" title="删除字段note"></a>删除字段note</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">DROP COLUMN note;</span><br></pre></td></tr></table></figure><h3 id="增加字段名favoriate-activity-数据类型为varchar100"><a href="#增加字段名favoriate-activity-数据类型为varchar100" class="headerlink" title="增加字段名favoriate_activity 数据类型为varchar100"></a>增加字段名favoriate_activity 数据类型为varchar100</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">ADD favoriate_activity VARCHAR(100);</span><br></pre></td></tr></table></figure><h3 id="将表employees-的名称改为employees-info"><a href="#将表employees-的名称改为employees-info" class="headerlink" title="将表employees 的名称改为employees_info"></a>将表employees 的名称改为employees_info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RENAME TABLE employees TO employees_info;</span><br><span class="line">DESC employees_info;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 运算符 学习笔记</title>
      <link href="/2018/12/11/MySql2/"/>
      <url>/2018/12/11/MySql2/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><hr><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（/）和取模（%）运算。</p><hr><p><strong>1．加法与减法运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 100, 100 + 0, 100 - 0, 100 + 50, 100 + 50 -30, 100 + 35.5, 100 - 35.5 FROM dual;</span><br><span class="line">+-----+---------+---------+----------+--------------+------------+------------+</span><br><span class="line">| 100 | 100 + 0 | 100 - 0 | 100 + 50 | 100 + 50 -30 | 100 + 35.5 | 100 - 35.5 |</span><br><span class="line">+-----+---------+---------+----------+--------------+------------+------------+</span><br><span class="line">| 100 |     100 |     100 |      150 |          120 |      135.5 |       64.5 |</span><br><span class="line">+-----+---------+---------+----------+--------------+------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</li><li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</li></ul></blockquote><p><strong>2．乘法与除法运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 100, 100 * 1, 100 * 1.0, 100 / 1.0, 100 / 2,100 + 2 * 5 / 2,100 /3, 100 DIV 0 FROM dual;</span><br><span class="line">+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><br><span class="line">| 100 | 100 * 1 | 100 * 1.0 | 100 / 1.0 | 100 / 2 | 100 + 2 * 5 / 2 | 100 /3  | 100 DIV 0 |</span><br><span class="line">+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><br><span class="line">| 100 |     100 |     100.0 |  100.0000 | 50.0000 |        105.0000 | 33.3333 |      NULL |</span><br><span class="line">+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#计算出员工的年基本工资</span><br><span class="line">SELECT employee_id,salary,salary * 12 annual_sal </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个数乘以整数1和除以整数1后仍得原数；</li><li>一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；</li><li>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</li><li>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</li><li>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</li><li>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</li></ul></blockquote><p><strong>3．求模（求余）运算符</strong><br>将t22表中的字段i对3和5进行求模（求余）运算。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 12 % 3, 12 MOD 5 FROM dual;</span><br><span class="line">+--------+----------+</span><br><span class="line">| 12 % 3 | 12 MOD 5 |</span><br><span class="line">+--------+----------+</span><br><span class="line">|      0 |        2 |</span><br><span class="line">+--------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#筛选出employee_id是偶数的员工</span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE employee_id MOD 2 = 0;</span><br></pre></td></tr></table></figure><p>可以看到，100对3求模后的结果为3，对5求模后的结果为0。</p><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><img src="/img/images/image-20211012101110021.png" alt="image-20211012101110021" /><p><img src="/img/images/image-20211012104955094.png" alt="image-20211012104955094"></p><p><strong>1．等号运算符</strong></p><ul><li><p>等号运算符（=）判断等号两边的值、字符串或表达式是否相等，如果相等则返回1，不相等则返回0。</p></li><li><p>在使用等号运算符时，遵循如下规则：</p><ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等。</li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></li><li><p>对比：SQL中赋值符号使用 := </p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 = 1, 1 = &#x27;1&#x27;, 1 = 0, &#x27;a&#x27; = &#x27;a&#x27;, (5 + 3) = (2 + 6), &#x27;&#x27; = NULL , NULL = NULL; </span><br><span class="line">+-------+---------+-------+-----------+-------------------+-----------+-------------+</span><br><span class="line">| 1 = 1 | 1 = &#x27;1&#x27; | 1 = 0 | &#x27;a&#x27; = &#x27;a&#x27; | (5 + 3) = (2 + 6) | &#x27;&#x27; = NULL | NULL = NULL |</span><br><span class="line">+-------+---------+-------+-----------+-------------------+-----------+-------------+</span><br><span class="line">|    1  |     1   |   0   |      1    |             1     |    NULL   |        NULL  |</span><br><span class="line">+-------+---------+-------+-----------+-------------------+-----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 = 2, 0 = &#x27;abc&#x27;, 1 = &#x27;abc&#x27; FROM dual;</span><br><span class="line">+-------+-----------+-----------+</span><br><span class="line">| 1 = 2 | 0 = &#x27;abc&#x27; | 1 = &#x27;abc&#x27; |</span><br><span class="line">+-------+-----------+-----------+</span><br><span class="line">|     0 |         1 |         0 |</span><br><span class="line">+-------+-----------+-----------+</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询salary=10000，注意在Java中比较是==</span><br><span class="line">SELECT employee_id,salary FROM employees WHERE salary = 10000;</span><br></pre></td></tr></table></figure><p><strong>2．安全等于运算符</strong><br>安全等于运算符（&lt;=&gt;）与等于运算符（=）的作用是相似的，<code>唯一的区别</code>是‘&lt;=&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 &lt;=&gt; &#x27;1&#x27;, 1 &lt;=&gt; 0, &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27;, (5 + 3) &lt;=&gt; (2 + 6), &#x27;&#x27; &lt;=&gt; NULL,NULL &lt;=&gt; NULL FROM dual;</span><br><span class="line">+-----------+---------+-------------+---------------------+-------------+---------------+</span><br><span class="line">| 1 &lt;=&gt; &#x27;1&#x27; | 1 &lt;=&gt; 0 | &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27; | (5 + 3) &lt;=&gt; (2 + 6) | &#x27;&#x27; &lt;=&gt; NULL | NULL &lt;=&gt; NULL |</span><br><span class="line">+-----------+---------+-------------+---------------------+-------------+---------------+</span><br><span class="line">|         1 |       0 |           1 |                   1 |           0 |             1 |</span><br><span class="line">+-----------+---------+-------------+---------------------+-------------+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询commission_pct等于0.40</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct = 0.40;</span><br><span class="line"></span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; 0.40;</span><br><span class="line"></span><br><span class="line">#如果把0.40改成 NULL 呢？</span><br></pre></td></tr></table></figure><p>可以看到，使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为1而不是NULL，其他返回结果与等于运算符相同。</p><p><strong>3．不等于运算符</strong><br>不等于运算符（&lt;&gt;和!=）用于判断两边的数字、字符串或者表达式的值是否不相等，如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 &lt;&gt; 1, 1 != 2, &#x27;a&#x27; != &#x27;b&#x27;, (3+4) &lt;&gt; (2+6), &#x27;a&#x27; != NULL, NULL &lt;&gt; NULL; </span><br><span class="line">+--------+--------+------------+----------------+-------------+--------------+</span><br><span class="line">| 1 &lt;&gt; 1 | 1 != 2 | &#x27;a&#x27; != &#x27;b&#x27; | (3+4) &lt;&gt; (2+6) | &#x27;a&#x27; != NULL | NULL &lt;&gt; NULL |</span><br><span class="line">+--------+--------+------------+----------------+-------------+--------------+</span><br><span class="line">|      0 |   1    |       1    |            1   |     NULL    |         NULL |</span><br><span class="line">+--------+--------+------------+----------------+-------------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>此外，还有非符号类型的运算符：</p><p><img src="/img/images/image-20211012105303219.png" alt="image-20211012105303219"></p><p><img src="/img/images/image-20211012105030527.png" alt="image-20211012105030527"></p><p><img src="/img/images/image-20211012105052456.png" alt="image-20211012105052456"></p><p><strong>4. 空运算符</strong><br>空运算符（IS NULL或者ISNULL）判断一个值是否为NULL，如果为NULL则返回1，否则返回0。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NULL IS NULL, ISNULL(NULL), ISNULL(&#x27;a&#x27;), 1 IS NULL;</span><br><span class="line">+--------------+--------------+-------------+-----------+</span><br><span class="line">| NULL IS NULL | ISNULL(NULL) | ISNULL(&#x27;a&#x27;) | 1 IS NULL |</span><br><span class="line">+--------------+--------------+-------------+-----------+</span><br><span class="line">|            1 |            1 |           0 |         0 |</span><br><span class="line">+--------------+--------------+-------------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询commission_pct等于NULL。比较如下的四种写法</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NULL;</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE ISNULL(commission_pct);</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct = NULL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name, manager_id</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  manager_id IS NULL;</span><br></pre></td></tr></table></figure><p><strong>5. 非空运算符</strong><br>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回1，否则返回0。<br>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NULL IS NOT NULL, &#x27;a&#x27; IS NOT NULL,  1 IS NOT NULL; </span><br><span class="line">+------------------+-----------------+---------------+</span><br><span class="line">| NULL IS NOT NULL | &#x27;a&#x27; IS NOT NULL | 1 IS NOT NULL |</span><br><span class="line">+------------------+-----------------+---------------+</span><br><span class="line">|                0 |               1 |             1 |</span><br><span class="line">+------------------+-----------------+---------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询commission_pct不等于NULL</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NOT NULL;</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE NOT commission_pct &lt;=&gt; NULL;</span><br><span class="line">SELECT employee_id,commission_pct FROM employees WHERE NOT ISNULL(commission_pct);</span><br></pre></td></tr></table></figure><p><strong>6. 最小值运算符</strong><br>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT LEAST (1,0,2), LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), LEAST(1,NULL,2);</span><br><span class="line">+---------------+--------------------+-----------------+</span><br><span class="line">| LEAST (1,0,2) | LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | LEAST(1,NULL,2) |</span><br><span class="line">+---------------+--------------------+-----------------+</span><br><span class="line">|       0       |        a           |      NULL       |</span><br><span class="line">+---------------+--------------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><p><strong>7. 最大值运算符</strong><br>语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT GREATEST(1,0,2), GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), GREATEST(1,NULL,2);</span><br><span class="line">+-----------------+-----------------------+--------------------+</span><br><span class="line">| GREATEST(1,0,2) | GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | GREATEST(1,NULL,2) |</span><br><span class="line">+-----------------+-----------------------+--------------------+</span><br><span class="line">|               2 | c                     |               NULL |</span><br><span class="line">+-----------------+-----------------------+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时，返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><p><strong>8. BETWEEN AND运算符</strong><br>BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 BETWEEN 0 AND 1, 10 BETWEEN 11 AND 12, &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;</span><br><span class="line">+-------------------+----------------------+-------------------------+</span><br><span class="line">| 1 BETWEEN 0 AND 1 | 10 BETWEEN 11 AND 12 | &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27; |</span><br><span class="line">+-------------------+----------------------+-------------------------+</span><br><span class="line">|                 1 |                    0 |                       1 |</span><br><span class="line">+-------------------+----------------------+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name, salary</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  salary BETWEEN 2500 AND 3500;</span><br></pre></td></tr></table></figure><p><strong>9. IN运算符</strong><br>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 IN (2,3), NULL IN (&#x27;a&#x27;,&#x27;b&#x27;), &#x27;a&#x27; IN (&#x27;a&#x27;, NULL);</span><br><span class="line">+----------------------+------------+-------------------+--------------------+</span><br><span class="line">| &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 IN (2,3) | NULL IN (&#x27;a&#x27;,&#x27;b&#x27;) | &#x27;a&#x27; IN (&#x27;a&#x27;, NULL) |</span><br><span class="line">+----------------------+------------+-------------------+--------------------+</span><br><span class="line">|            1         |        0   |         NULL      |         1          |</span><br><span class="line">+----------------------+------------+-------------------+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name, salary, manager_id</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  manager_id IN (100, 101, 201);</span><br></pre></td></tr></table></figure><p><strong>10. NOT IN运算符</strong><br>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一个值，则返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 NOT IN (2,3);</span><br><span class="line">+--------------------------+----------------+</span><br><span class="line">| &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 NOT IN (2,3) |</span><br><span class="line">+--------------------------+----------------+</span><br><span class="line">|                 0        |            1   |</span><br><span class="line">+--------------------------+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>11. LIKE运算符</strong><br>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><p>LIKE运算符通常使用如下通配符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“%”：匹配0个或多个字符。</span><br><span class="line">“_”：只能匹配一个字符。</span><br></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NULL LIKE &#x27;abc&#x27;, &#x27;abc&#x27; LIKE NULL;  </span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">| NULL LIKE &#x27;abc&#x27; | &#x27;abc&#x27; LIKE NULL |</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">|          NULL   |          NULL   |</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT  first_name</span><br><span class="line">FROM  employees</span><br><span class="line">WHERE first_name LIKE &#x27;S%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  last_name LIKE &#x27;_o%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>ESCAPE</strong></p><ul><li>回避特殊符号的：<strong>使用转义符</strong>。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT job_id</span><br><span class="line">FROM   jobs</span><br><span class="line">WHERE  job_id LIKE ‘IT\_%‘;</span><br></pre></td></tr></table></figure><ul><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT job_id</span><br><span class="line">FROM   jobs</span><br><span class="line">WHERE  job_id LIKE ‘IT$_%‘ escape ‘$‘;</span><br></pre></td></tr></table></figure><p><strong>12. REGEXP运算符</strong></p><p>REGEXP运算符用来匹配字符串，语法格式为：<code>expr REGEXP 匹配条件</code>。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</p><p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）‘^’匹配以该字符后面的字符开头的字符串。</span><br><span class="line">（2）‘$’匹配以该字符前面的字符结尾的字符串。</span><br><span class="line">（3）‘.’匹配任何一个单字符。</span><br><span class="line">（4）“[...]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。</span><br><span class="line">（5）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“[0-9]*”匹配任何数量的数字，而“*”匹配任何数量的任何字符。</span><br></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;;</span><br><span class="line">+------------------------+------------------------+-------------------------+</span><br><span class="line">| &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;  |</span><br><span class="line">+------------------------+------------------------+-------------------------+</span><br><span class="line">|                      1 |                      1 |                       1 |</span><br><span class="line">+------------------------+------------------------+-------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27;, &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27;;</span><br><span class="line">+--------------------------+-------------------------+</span><br><span class="line">| &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27; | &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27; |</span><br><span class="line">+--------------------------+-------------------------+</span><br><span class="line">|                        1 |                       1 |</span><br><span class="line">+--------------------------+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。</p><p>MySQL中支持4种逻辑运算符如下：</p><p><img src="/img/images/image-20211012110241418.png" alt="image-20211012110241418"></p><p><strong>1．逻辑非运算符</strong><br>逻辑非（NOT或!）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NOT 1, NOT 0, NOT(1+1), NOT !1, NOT NULL;    </span><br><span class="line">+-------+-------+----------+--------+----------+</span><br><span class="line">| NOT 1 | NOT 0 | NOT(1+1) | NOT !1 | NOT NULL |</span><br><span class="line">+-------+-------+----------+--------+----------+</span><br><span class="line">|     0 |     1 |        0 |      1 |     NULL |</span><br><span class="line">+-------+-------+----------+--------+----------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name, job_id</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  job_id NOT IN (&#x27;IT_PROG&#x27;, &#x27;ST_CLERK&#x27;, &#x27;SA_REP&#x27;);</span><br></pre></td></tr></table></figure><p><strong>2．逻辑与运算符</strong><br>逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 AND -1, 0 AND 1, 0 AND NULL, 1 AND NULL;</span><br><span class="line">+----------+---------+------------+------------+</span><br><span class="line">| 1 AND -1 | 0 AND 1 | 0 AND NULL | 1 AND NULL |</span><br><span class="line">+----------+---------+------------+------------+</span><br><span class="line">|        1 |       0 |          0 |       NULL |</span><br><span class="line">+----------+---------+------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name, job_id, salary</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  salary &gt;=10000</span><br><span class="line">AND    job_id LIKE &#x27;%MAN%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>3．逻辑或运算符</strong><br>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 OR -1, 1 OR 0, 1 OR NULL, 0 || NULL, NULL || NULL;     </span><br><span class="line">+---------+--------+-----------+-----------+--------------+</span><br><span class="line">| 1 OR -1 | 1 OR 0 | 1 OR NULL | 0 || NULL | NULL || NULL |</span><br><span class="line">+---------+--------+-----------+-----------+--------------+</span><br><span class="line">|       1 |      1 |         1 |    NULL   |       NULL   |</span><br><span class="line">+---------+--------+-----------+-----------+--------------+</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询基本薪资不在9000-12000之间的员工编号和基本薪资</span><br><span class="line">SELECT employee_id,salary FROM employees </span><br><span class="line">WHERE NOT (salary &gt;= 9000 AND salary &lt;= 12000);</span><br><span class="line"></span><br><span class="line">SELECT employee_id,salary FROM employees </span><br><span class="line">WHERE salary &lt;9000 OR salary &gt; 12000;</span><br><span class="line"></span><br><span class="line">SELECT employee_id,salary FROM employees </span><br><span class="line">WHERE salary NOT BETWEEN 9000 AND 12000;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name, job_id, salary</span><br><span class="line">FROM   employees</span><br><span class="line">WHERE  salary &gt;= 10000</span><br><span class="line">OR     job_id LIKE &#x27;%MAN%&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</p></blockquote><p><strong>4．逻辑异或运算符</strong><br>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 XOR -1, 1 XOR 0, 0 XOR 0, 1 XOR NULL, 1 XOR 1 XOR 1, 0 XOR 0 XOR 0;</span><br><span class="line">+----------+---------+---------+------------+---------------+---------------+</span><br><span class="line">| 1 XOR -1 | 1 XOR 0 | 0 XOR 0 | 1 XOR NULL | 1 XOR 1 XOR 1 | 0 XOR 0 XOR 0 |</span><br><span class="line">+----------+---------+---------+------------+---------------+---------------+</span><br><span class="line">|        0 |       1 |       0 |       NULL |             1 |             0 |</span><br><span class="line">+----------+---------+---------+------------+---------------+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select last_name,department_id,salary </span><br><span class="line">from employees</span><br><span class="line">where department_id in (10,20) XOR salary &gt; 8000;</span><br></pre></td></tr></table></figure><h2 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p><p>MySQL支持的位运算符如下：</p><p><img src="/img/images/image-20211012110511223.png" alt="image-20211012110511223"></p><p><strong>1．按位与运算符</strong><br>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二进制位的数值都为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 &amp; 10, 20 &amp; 30;</span><br><span class="line">+--------+---------+</span><br><span class="line">| 1 &amp; 10 | 20 &amp; 30 |</span><br><span class="line">+--------+---------+</span><br><span class="line">|      0 |      20 |</span><br><span class="line">+--------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制数为10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</p><p><strong>2. 按位或运算符</strong><br>按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 | 10, 20 | 30; </span><br><span class="line">+--------+---------+</span><br><span class="line">| 1 | 10 | 20 | 30 |</span><br><span class="line">+--------+---------+</span><br><span class="line">|     11 |      30 |</span><br><span class="line">+--------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 | 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 | 30的结果为11110，对应的十进制数为30。</p><p><strong>3. 按位异或运算符</strong><br>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 ^ 10, 20 ^ 30; </span><br><span class="line">+--------+---------+</span><br><span class="line">| 1 ^ 10 | 20 ^ 30 |</span><br><span class="line">+--------+---------+</span><br><span class="line">|     11 |      10 |</span><br><span class="line">+--------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>1的二进制数为0001，10的二进制数为1010，所以1 ^ 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 ^ 30的结果为01010，对应的十进制数为10。</p><p>再举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 12 &amp; 5, 12 | 5,12 ^ 5 FROM DUAL;</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">| 12 &amp; 5 | 12 | 5 | 12 ^ 5 |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">|      4 |     13 |      9 |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><img src="/img/images/image-20211023115738415.png" alt="image-20211023115738415" style="zoom:80%;" /><p><strong>4. 按位取反运算符</strong><br>按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将1变为0，将0变为1。</p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 10 &amp; ~1;</span><br><span class="line">+---------+</span><br><span class="line">| 10 &amp; ~1 |</span><br><span class="line">+---------+</span><br><span class="line">|      10 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以10 &amp; ~1，首先，对数字1进行按位取反操作，结果除了最低位为0，其他位都为1，然后与10进行按位与操作，结果为10。</p><p><strong>5. 按位右移运算符</strong><br>按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 &gt;&gt; 2, 4 &gt;&gt; 2;</span><br><span class="line">+--------+--------+</span><br><span class="line">| 1 &gt;&gt; 2 | 4 &gt;&gt; 2 |</span><br><span class="line">+--------+--------+</span><br><span class="line">|      0 |      1 |</span><br><span class="line">+--------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2位为0000 0001，对应的十进制数为1。</p><p><strong>6. 按位左移运算符</strong><br>按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 1 &lt;&lt; 2, 4 &lt;&lt; 2;  </span><br><span class="line">+--------+--------+</span><br><span class="line">| 1 &lt;&lt; 2 | 4 &lt;&lt; 2 |</span><br><span class="line">+--------+--------+</span><br><span class="line">|      4 |     16 |</span><br><span class="line">+--------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移两位为0001 0000，对应的十进制数为16。</p><h2 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5. 运算符的优先级"></a>5. 运算符的优先级</h2><p><img src="/img/images/image-20211012111042395.png" alt="image-20211012111042395"></p><p><img src="/img/images/image-20211012110731059.png" alt="image-20211012110731059"></p><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。</p><h2 id="拓展：使用正则表达式查询"><a href="#拓展：使用正则表达式查询" class="headerlink" title="拓展：使用正则表达式查询"></a>拓展：使用正则表达式查询</h2><p>正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合要求的特殊字符串。例如，从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户输入的某些敏感词语等，这些地方都可以使用正则表达式。正则表达式强大而且灵活，可以应用于非常复杂的查询。</p><p>MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式。下表列出了REGEXP操作符中常用字符匹配列表。</p><p><img src="/img/images/image-20210926151249943.png" alt="image-20210926151249943"></p><p><strong>1. 查询以特定字符或字符串开头的记录</strong><br>字符‘^’匹配以特定字符或者字符串开头的文本。</p><p>在fruits表中，查询f_name字段以字母‘b’开头的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^b&#x27;;</span><br></pre></td></tr></table></figure><p><strong>2. 查询以特定字符或字符串结尾的记录</strong><br>字符‘$’匹配以特定字符或者字符串结尾的文本。</p><p>在fruits表中，查询f_name字段以字母‘y’结尾的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;y$&#x27;;</span><br></pre></td></tr></table></figure><p><strong>3. 用符号”.”来替代字符串中的任意一个字符</strong><br>字符‘.’匹配任意一个字符。<br>在fruits表中，查询f_name字段值包含字母‘a’与‘g’且两个字母之间只有一个字母的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;a.g&#x27;;</span><br></pre></td></tr></table></figure><p><strong>4. 使用”*”和”+”来匹配多个字符</strong><br>星号‘*’匹配前面的字符任意多次，包括0次。加号‘+’匹配前面的字符至少一次。<br>*</p><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba*&#x27;;</span><br></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’至少一次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba+&#x27;;</span><br></pre></td></tr></table></figure><p><strong>5. 匹配指定字符串</strong><br>正则表达式可以匹配指定字符串，只要这个字符串在查询文本中即可，如要匹配多个字符串，多个字符串之间使用分隔符‘|’隔开。</p><p>在fruits表中，查询f_name字段值包含字符串“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on&#x27;;</span><br></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值包含字符串“on”或者“ap”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on|ap&#x27;;</span><br></pre></td></tr></table></figure><p>之前介绍过，LIKE运算符也可以匹配指定的字符串，但与REGEXP不同，LIKE匹配的字符串如果在文本中间出现，则找不到它，相应的行也不会返回。REGEXP在文本内进行匹配，如果被匹配的字符串在文本中出现，REGEXP将会找到它，相应的行也会被返回。对比结果如下所示。</p><p>在fruits表中，使用LIKE运算符查询f_name字段值为“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name like &#x27;on&#x27;;</span><br><span class="line">Empty set(0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>6. 匹配指定字符中的任意一个</strong><br>方括号“[]”指定一个字符集合，只匹配其中任何一个字符，即为所查找的文本。</p><p>在fruits表中，查找f_name字段中包含字母‘o’或者‘t’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;[ot]&#x27;;</span><br></pre></td></tr></table></figure><p>在fruits表中，查询s_id字段中包含4、5或者6的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE s_id REGEXP &#x27;[456]&#x27;;</span><br></pre></td></tr></table></figure><p><strong>7. 匹配指定字符以外的字符</strong><br><code>“[^字符集合]”</code>匹配不在指定集合中的任何字符。</p><p>在fruits表中，查询f_id字段中包含字母a<del>e和数字1</del>2以外字符的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_id REGEXP &#x27;[^a-e1-2]&#x27;;</span><br></pre></td></tr></table></figure><p><strong>8. 使用{n,}或者{n,m}来指定字符串连续出现的次数</strong><br>“字符串{n,}”表示至少匹配n次前面的字符；“字符串{n,m}”表示匹配前面的字符串不少于n次，不多于m次。例如，a{2,}表示字母a连续出现至少2次，也可以大于2次；a{2,4}表示字母a连续出现最少2次，最多不能超过4次。</p><p>在fruits表中，查询f_name字段值出现字母‘x’至少2次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;x&#123;2,&#125;&#x27;;</span><br></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值出现字符串“ba”最少1次、最多3次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;ba&#123;1,3&#125;&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 查询语句 学习笔记</title>
      <link href="/2018/12/11/MySqlStudy/"/>
      <url>/2018/12/11/MySqlStudy/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql-查询语句练习"><a href="#MySql-查询语句练习" class="headerlink" title="MySql 查询语句练习"></a>MySql 查询语句练习</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DESC departments;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees </span><br><span class="line">WHERE last_name =<span class="string">&#x27;king&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="单表练习"><a href="#单表练习" class="headerlink" title="单表练习"></a>单表练习</h2><h3 id="查询员工12个月工资总和和奖金-别名annual-aslary"><a href="#查询员工12个月工资总和和奖金-别名annual-aslary" class="headerlink" title="查询员工12个月工资总和和奖金 别名annual aslary"></a>查询员工12个月工资总和和奖金 别名annual aslary</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,salary *12*(1+IFNULL(commission_pct,0)) <span class="string">&quot;annual aslary&quot;</span></span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h3 id="查询员工表中去除重复job-id后的数据"><a href="#查询员工表中去除重复job-id后的数据" class="headerlink" title="查询员工表中去除重复job_id后的数据"></a>查询员工表中去除重复job_id后的数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT  DISTINCT job_id FROM employees;</span><br></pre></td></tr></table></figure><h3 id="查询工资大于12000员工的名和工资"><a href="#查询工资大于12000员工的名和工资" class="headerlink" title="查询工资大于12000员工的名和工资"></a>查询工资大于12000员工的名和工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name, salary FROM employees </span><br><span class="line">WHERE salary &gt;12000;</span><br></pre></td></tr></table></figure><h3 id="查询员工工号为176的姓名和部门号"><a href="#查询员工工号为176的姓名和部门号" class="headerlink" title="查询员工工号为176的姓名和部门号"></a>查询员工工号为176的姓名和部门号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,department_id FROM employees</span><br><span class="line">WHERE employee_id =176;</span><br></pre></td></tr></table></figure><h3 id="显示表departments-的结构-并查询其中全部数据"><a href="#显示表departments-的结构-并查询其中全部数据" class="headerlink" title="显示表departments 的结构 并查询其中全部数据"></a>显示表departments 的结构 并查询其中全部数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DESC departments;</span><br><span class="line">SELECT *FROM departments;</span><br></pre></td></tr></table></figure><h3 id="查询员工的姓名部门号-年薪-按年薪降序-姓名升序显示"><a href="#查询员工的姓名部门号-年薪-按年薪降序-姓名升序显示" class="headerlink" title="查询员工的姓名部门号 年薪 按年薪降序 姓名升序显示"></a>查询员工的姓名部门号 年薪 按年薪降序 姓名升序显示</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECTlast_name, department_id, salary * 12 annual_sal</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY annual_sal DESC ,last_name ASC;</span><br></pre></td></tr></table></figure><h3 id="选择工资不在8000到17000的员工的姓名和工资-按工资排序-显示21到40的数据"><a href="#选择工资不在8000到17000的员工的姓名和工资-按工资排序-显示21到40的数据" class="headerlink" title="选择工资不在8000到17000的员工的姓名和工资 按工资排序 显示21到40的数据"></a>选择工资不在8000到17000的员工的姓名和工资 按工资排序 显示21到40的数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,salary </span><br><span class="line">FROM employees </span><br><span class="line">WHERE salary NOT BETWEEN 8000 AND 17000</span><br><span class="line">ORDER BY salary DESC</span><br><span class="line">LIMIT 20,20;</span><br></pre></td></tr></table></figure><h3 id="查询邮箱中包含e的员工的信息-并先按邮箱的字节数降序-再按部门号升序"><a href="#查询邮箱中包含e的员工的信息-并先按邮箱的字节数降序-再按部门号升序" class="headerlink" title="查询邮箱中包含e的员工的信息 并先按邮箱的字节数降序 再按部门号升序"></a>查询邮箱中包含e的员工的信息 并先按邮箱的字节数降序 再按部门号升序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name,email,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE <span class="string">&#x27;%e%&#x27;</span></span><br><span class="line">ORDER BY LENGTH(email) DESC, department_id ASC;</span><br></pre></td></tr></table></figure><h2 id="多表练习"><a href="#多表练习" class="headerlink" title="多表练习"></a>多表练习</h2><h3 id="显示所有员工的姓名部门号和部门名称"><a href="#显示所有员工的姓名部门号和部门名称" class="headerlink" title="显示所有员工的姓名部门号和部门名称"></a>显示所有员工的姓名部门号和部门名称</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.last_name,e.employee_id, d.department_id, d.department_name</span><br><span class="line">FROM employees e LEFT JOIN departments d</span><br><span class="line">ON e.`department_id`=d.department_id</span><br></pre></td></tr></table></figure><h3 id="查询90号部门员工的job-id-和90号部门的location-id"><a href="#查询90号部门员工的job-id-和90号部门的location-id" class="headerlink" title="查询90号部门员工的job_id 和90号部门的location_id"></a>查询90号部门员工的job_id 和90号部门的location_id</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.job_id , d.location_id</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">WHERE d.`department_id`=90;</span><br></pre></td></tr></table></figure><h3 id="查询所有奖金的员工的last-name，-department-name-location-id-city"><a href="#查询所有奖金的员工的last-name，-department-name-location-id-city" class="headerlink" title="查询所有奖金的员工的last_name， department_name location_id city"></a>查询所有奖金的员工的last_name， department_name location_id city</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.last_name ,e.`commission_pct`, d.department_name , d.location_id , l.city</span><br><span class="line">FROM employees e LEFT JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">LEFT JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">WHERE e.`commission_pct` IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="选择city-在toronto工作的员工的last-name-job-id-department-id-department-name"><a href="#选择city-在toronto工作的员工的last-name-job-id-department-id-department-name" class="headerlink" title="选择city 在toronto工作的员工的last_name job_id department_id department_name"></a>选择city 在toronto工作的员工的last_name job_id department_id department_name</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.last_name,e.job_id,e.department_id,d.department_name,l.`city`</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">WHERE l.`city`=<span class="string">&#x27;toronto&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="查询员工所在的部门名称-部门地址-姓名工作工资-其中员工所在的部门的部门名称为Executive"><a href="#查询员工所在的部门名称-部门地址-姓名工作工资-其中员工所在的部门的部门名称为Executive" class="headerlink" title="查询员工所在的部门名称 部门地址 姓名工作工资 其中员工所在的部门的部门名称为Executive"></a>查询员工所在的部门名称 部门地址 姓名工作工资 其中员工所在的部门的部门名称为Executive</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT d.department_name,l.street_address,e.last_name,e.job_id,e.salary</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">WHERE d.`department_name` = <span class="string">&#x27;Executive&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="选择指定员工的姓名-员工号-以及他的管理的姓名-员工号"><a href="#选择指定员工的姓名-员工号-以及他的管理的姓名-员工号" class="headerlink" title="选择指定员工的姓名 员工号 以及他的管理的姓名 员工号"></a>选择指定员工的姓名 员工号 以及他的管理的姓名 员工号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT emp.last_name <span class="string">&quot;employee&quot;</span>, emp.employee_id <span class="string">&quot;Emp#&quot;</span>,mgr.last_name <span class="string">&quot;manager&quot;</span>,mgr.employee_id <span class="string">&quot;Mgr#&quot;</span></span><br><span class="line">FROM employees emp LEFT JOIN employees mgr</span><br><span class="line">ON emp.manager_id =mgr.employee_id;</span><br></pre></td></tr></table></figure><h3 id="查询那些员工没有部门"><a href="#查询那些员工没有部门" class="headerlink" title="查询那些员工没有部门"></a>查询那些员工没有部门</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.`employee_id`,d.`department_id`,d.`department_name`</span><br><span class="line">FROM  departments d LEFT JOIN  employees e </span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">WHERE e.`department_id` IS NULL;</span><br></pre></td></tr></table></figure><h3 id="查询那个城市没有部门"><a href="#查询那个城市没有部门" class="headerlink" title="查询那个城市没有部门"></a>查询那个城市没有部门</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT l.location_id, l.city,d.`department_id`</span><br><span class="line">FROM locations l LEFT JOIN departments d</span><br><span class="line">ON l.`location_id`=d.`location_id`</span><br><span class="line">WHERE d.`department_id` IS NULL;</span><br></pre></td></tr></table></figure><h3 id="查询部门名为sales或-it-的员工的信息"><a href="#查询部门名为sales或-it-的员工的信息" class="headerlink" title="查询部门名为sales或 it 的员工的信息"></a>查询部门名为sales或 it 的员工的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT e.`employee_id`,e.last_name,e.`department_id`,d.`department_name`</span><br><span class="line">FROM departments d JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">WHERE d.`department_name` IN(<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;it&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC locations;</span><br><span class="line">`employees`</span><br><span class="line">DESC departments;</span><br></pre></td></tr></table></figure><h3 id="面试-分数降序"><a href="#面试-分数降序" class="headerlink" title="面试 分数降序"></a>面试 分数降序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT salary </span><br><span class="line">FROM employees </span><br><span class="line">WHERE salary &gt;6000</span><br><span class="line">ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><h3 id="平均分"><a href="#平均分" class="headerlink" title="平均分"></a>平均分</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">学生表 S(学号 S<span class="comment">#,姓名 Sn,所在系 SD,年龄 SA)</span></span><br><span class="line">课程表 C(课程号 C<span class="comment">#,课程名称 CN，先修课号 PC#)</span></span><br><span class="line">学生选课表 SC(学号 S<span class="comment">#，课程号 C#,成绩G)</span></span><br><span class="line">问题一：画出该数据库系统的实体联系图（E-R图），注明联系类型</span><br><span class="line">问题二：列出选课超过3门的学生学号，其所选课程数量及平均成绩</span><br><span class="line">*/</span><br><span class="line">SELECT CONNECTION_ID()</span><br><span class="line">FROM DUAL</span><br></pre></td></tr></table></figure><h3 id="显示系统的时间"><a href="#显示系统的时间" class="headerlink" title="显示系统的时间"></a>显示系统的时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CURDATE(),CURTIME(),SYSDATE() ,NOW(),LOCALTIME();</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><h3 id="查询员工工号-姓名-工资以及工资提高百分比20后的结果"><a href="#查询员工工号-姓名-工资以及工资提高百分比20后的结果" class="headerlink" title="查询员工工号 姓名 工资以及工资提高百分比20后的结果"></a>查询员工工号 姓名 工资以及工资提高百分比20后的结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name, salary, salary*(1+0.2)<span class="string">&quot;new salary&quot;</span></span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h3 id="将员工的姓名按首字母排序-并写出姓名长度"><a href="#将员工的姓名按首字母排序-并写出姓名长度" class="headerlink" title="将员工的姓名按首字母排序 并写出姓名长度"></a>将员工的姓名按首字母排序 并写出姓名长度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,LENGTH(last_name)</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY last_name ASC;</span><br></pre></td></tr></table></figure><h3 id="查询员工的id-last-name-salary-作为一列输出-别名为out-put"><a href="#查询员工的id-last-name-salary-作为一列输出-别名为out-put" class="headerlink" title="查询员工的id last_name salary 作为一列输出 别名为out_put"></a>查询员工的id last_name salary 作为一列输出 别名为out_put</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT (employee_id ,<span class="string">&#x27;  &#x27;</span>,last_name,<span class="string">&#x27;  &#x27;</span>, salary)<span class="string">&quot;OUT_PUT&quot;</span></span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h3 id="查询公司各员工工作的年数，工作的天数，按工作年数降序"><a href="#查询公司各员工工作的年数，工作的天数，按工作年数降序" class="headerlink" title="查询公司各员工工作的年数，工作的天数，按工作年数降序"></a>查询公司各员工工作的年数，工作的天数，按工作年数降序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,ROUND(DATEDIFF(NOW(),hire_date)/365) <span class="string">&quot;worked_years&quot;</span>,DATEDIFF(NOW(),hire_date)<span class="string">&quot;worked_days&quot;</span></span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY worked_years DESC;</span><br></pre></td></tr></table></figure><h3 id="查询员工姓名-hire-date-department-id-满足一下条件"><a href="#查询员工姓名-hire-date-department-id-满足一下条件" class="headerlink" title="查询员工姓名 hire date department id 满足一下条件"></a>查询员工姓名 hire date department id 满足一下条件</h3><h3 id="雇佣时间在97年之后-id-为80-或90或110-commission-pct不为空"><a href="#雇佣时间在97年之后-id-为80-或90或110-commission-pct不为空" class="headerlink" title="雇佣时间在97年之后 id 为80 或90或110 commission_pct不为空"></a>雇佣时间在97年之后 id 为80 或90或110 commission_pct不为空</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,hire_date,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(80,90,110)</span><br><span class="line">AND commission_pct IS NOT NULL</span><br><span class="line"><span class="comment">#and hire_date &gt;=&#x27;1997-01-01&#x27;;隐式转换</span></span><br><span class="line"><span class="comment">#显示转换</span></span><br><span class="line">AND hire_date &gt;= STR_TO_DATE(<span class="string">&#x27;1997-01-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="查询公司中入职超过一万天的员工的姓名-入职时间"><a href="#查询公司中入职超过一万天的员工的姓名-入职时间" class="headerlink" title="查询公司中入职超过一万天的员工的姓名 入职时间"></a>查询公司中入职超过一万天的员工的姓名 入职时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,hire_date</span><br><span class="line">FROM employees</span><br><span class="line">WHERE DATEDIFF(CURDATE(),hire_date) &gt;=10000;</span><br></pre></td></tr></table></figure><h3 id="输出指定结果"><a href="#输出指定结果" class="headerlink" title="输出指定结果"></a>输出指定结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(last_name,<span class="string">&#x27; earns &#x27;</span>,salary,<span class="string">&#x27; monthly but wants &#x27;</span>,salary*3 )<span class="string">&quot;dream salary&quot;</span></span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h3 id="使用case-when"><a href="#使用case-when" class="headerlink" title="使用case when"></a>使用case when</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name <span class="string">&quot;Last_name&quot;</span>,job_id <span class="string">&quot;Job_id&quot;</span>,CASE job_id WHEN <span class="string">&#x27;AD_PRES&#x27;</span> THEN <span class="string">&#x27;A&#x27;</span></span><br><span class="line">                                                         WHEN <span class="string">&#x27;ST_MAN&#x27;</span> THEN <span class="string">&#x27;B&#x27;</span></span><br><span class="line">                                                         WHEN <span class="string">&#x27;IT_PROG&#x27;</span> THEN <span class="string">&#x27;C&#x27;</span></span><br><span class="line">                                                         WHEN <span class="string">&#x27;SA_REP&#x27;</span> THEN <span class="string">&#x27;D&#x27;</span></span><br><span class="line">                                                         WHEN <span class="string">&#x27;ST_CLERK&#x27;</span> THEN <span class="string">&#x27;E&#x27;</span> </span><br><span class="line">                                                         ELSE <span class="string">&#x27;undefined&#x27;</span> END <span class="string">&quot;Grade&quot;</span></span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h2 id="多行-聚合函数"><a href="#多行-聚合函数" class="headerlink" title="多行  聚合函数"></a>多行  聚合函数</h2><h3 id="查询各个部门的平均工资-最高工资"><a href="#查询各个部门的平均工资-最高工资" class="headerlink" title="查询各个部门的平均工资 最高工资"></a>查询各个部门的平均工资 最高工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT department_id, AVG(salary),SUM(salary),MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =20;</span><br></pre></td></tr></table></figure><h3 id="查询每个工种的平均工资"><a href="#查询每个工种的平均工资" class="headerlink" title="查询每个工种的平均工资"></a>查询每个工种的平均工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br></pre></td></tr></table></figure><h3 id="查询各个job-id的员工工资的最大值-最小值-平均值-总和"><a href="#查询各个job-id的员工工资的最大值-最小值-平均值-总和" class="headerlink" title="查询各个job_id的员工工资的最大值 最小值 平均值 总和"></a>查询各个job_id的员工工资的最大值 最小值 平均值 总和</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT job_id ,MAX(salary) sala_max,MIN(salary) sala_min, AVG(salary) sala_avg, SUM(salary) sala_sum</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h3 id="选着具有各个job-id的员工的人数"><a href="#选着具有各个job-id的员工的人数" class="headerlink" title="选着具有各个job_id的员工的人数"></a>选着具有各个job_id的员工的人数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT job_id,COUNT(*)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h3 id="查询员工工资最高工资和最低工资的差距"><a href="#查询员工工资最高工资和最低工资的差距" class="headerlink" title="查询员工工资最高工资和最低工资的差距"></a>查询员工工资最高工资和最低工资的差距</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT MAX(salary)-MIN(salary) <span class="string">&quot;diffrence&quot;</span></span><br><span class="line">FROM employees</span><br></pre></td></tr></table></figure><h3 id="查询各个管理者手下员工的最低工资-其中最低工资不能低于6000没有管理者不计算在内"><a href="#查询各个管理者手下员工的最低工资-其中最低工资不能低于6000没有管理者不计算在内" class="headerlink" title="查询各个管理者手下员工的最低工资 其中最低工资不能低于6000没有管理者不计算在内"></a>查询各个管理者手下员工的最低工资 其中最低工资不能低于6000没有管理者不计算在内</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT manager_id,MIN(salary) sala_min</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IS NOT NULL</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING sala_min &gt;=6000;</span><br></pre></td></tr></table></figure><h3 id="查询所有部门的名字-location-id-员工数量和平均工资-并按平均工资降序"><a href="#查询所有部门的名字-location-id-员工数量和平均工资-并按平均工资降序" class="headerlink" title="查询所有部门的名字 location_id 员工数量和平均工资 并按平均工资降序"></a>查询所有部门的名字 location_id 员工数量和平均工资 并按平均工资降序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT  d.department_name, d.location_id,COUNT(employee_id), AVG(e.salary) <span class="string">&quot;sala_avg&quot;</span></span><br><span class="line">FROM departments d LEFT JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">GROUP BY d.department_name, d.location_id</span><br><span class="line">ORDER BY sala_avg DESC;</span><br></pre></td></tr></table></figure><h3 id="查询每个工种-每个部门的部门名-工种名和最低工资"><a href="#查询每个工种-每个部门的部门名-工种名和最低工资" class="headerlink" title="查询每个工种 每个部门的部门名 工种名和最低工资"></a>查询每个工种 每个部门的部门名 工种名和最低工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT  d.department_name, e.job_id,MIN(e.salary)</span><br><span class="line">FROM departments d LEFT JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">GROUP BY d.department_name, e.job_id;</span><br></pre></td></tr></table></figure><h3 id="查询和-zlotkey相同部门的员工的姓名和工资"><a href="#查询和-zlotkey相同部门的员工的姓名和工资" class="headerlink" title="查询和 zlotkey相同部门的员工的姓名和工资"></a>查询和 zlotkey相同部门的员工的姓名和工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =( SELECT department_id</span><br><span class="line">       FROM employees</span><br><span class="line">       WHERE last_name =<span class="string">&#x27;Zlotkey&#x27;</span>                </span><br><span class="line">                     );</span><br></pre></td></tr></table></figure><h3 id="查询工资比公司平均工资高的员工的工号-姓名和工资"><a href="#查询工资比公司平均工资高的员工的工号-姓名和工资" class="headerlink" title="查询工资比公司平均工资高的员工的工号 姓名和工资"></a>查询工资比公司平均工资高的员工的工号 姓名和工资</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; (SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="选着工资大于所有JOB-ID-’SA-MAN’的员工的工资的员工的姓名-job-id-salary"><a href="#选着工资大于所有JOB-ID-’SA-MAN’的员工的工资的员工的姓名-job-id-salary" class="headerlink" title="选着工资大于所有JOB_ID=’SA_MAN’的员工的工资的员工的姓名 job_id salary"></a>选着工资大于所有JOB_ID=’SA_MAN’的员工的工资的员工的姓名 job_id salary</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; ALL(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=<span class="string">&#x27;SA_MAN&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询-和姓名中包含字母u的员工在相同部门的-员工的工号和姓名"><a href="#查询-和姓名中包含字母u的员工在相同部门的-员工的工号和姓名" class="headerlink" title="查询  和姓名中包含字母u的员工在相同部门的   员工的工号和姓名"></a>查询  和姓名中包含字母u的员工在相同部门的   员工的工号和姓名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id, last_name</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE department_id IN (</span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM employees </span><br><span class="line">WHERE last_name LIKE <span class="string">&#x27;%u%&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询在部门location-id为1700的部门工作的员工的员工号"><a href="#查询在部门location-id为1700的部门工作的员工的员工号" class="headerlink" title="查询在部门location_id为1700的部门工作的员工的员工号"></a>查询在部门location_id为1700的部门工作的员工的员工号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id =1700</span><br><span class="line">   );</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查询管理者是King的员工的 工资 姓名</span></span><br><span class="line">``` bash</span><br><span class="line">SELECT last_name,salary,manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IN (</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name =<span class="string">&#x27;King&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询工资最低的员工的信息"><a href="#查询工资最低的员工的信息" class="headerlink" title="查询工资最低的员工的信息"></a>查询工资最低的员工的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &lt;=(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询平均工资最低的部门信息"><a href="#查询平均工资最低的部门信息" class="headerlink" title="查询平均工资最低的部门信息"></a>查询平均工资最低的部门信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT MIN(avg_salary) </span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary)<span class="string">&quot;avg_salary&quot;</span></span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)t_dept_avg_sala</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)&lt;= ALL(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三 limt </span></span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY avg_sala ASC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式 四</span></span><br><span class="line">SELECT d.* </span><br><span class="line">FROM departments d,(</span><br><span class="line">  SELECT department_id,AVG(salary) avg_sala</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  ORDER BY avg_sala ASC</span><br><span class="line">  LIMIT 1</span><br><span class="line">  )t_emp_avg_sala</span><br><span class="line">WHERE d.`department_id`=t_emp_avg_sala.department_id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查询平均工资最低的部门信息和该部门的平均工资-相关子查询"><a href="#查询平均工资最低的部门信息和该部门的平均工资-相关子查询" class="headerlink" title="查询平均工资最低的部门信息和该部门的平均工资 相关子查询"></a>查询平均工资最低的部门信息和该部门的平均工资 相关子查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT d.*,(SELECT AVG(salary) FROM employees WHERE department_id = d.`department_id`) avg_salary</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT MIN(avg_salary) </span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary)<span class="string">&quot;avg_salary&quot;</span></span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)t_dept_avg_sala</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">SELECT d.*,(SELECT AVG(salary) FROM employees WHERE department_id = d.`department_id`) avg_salary</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)&lt;= ALL(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三 limt </span></span><br><span class="line">SELECT d.*,(SELECT AVG(salary) FROM employees WHERE department_id = d.`department_id`) avg_salary</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE department_id = (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY avg_sala ASC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式 四</span></span><br><span class="line">SELECT d.* ,(SELECT AVG(salary) FROM employees WHERE department_id = d.`department_id`) avg_salary</span><br><span class="line">FROM departments d,(</span><br><span class="line">  SELECT department_id,AVG(salary) avg_sala</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  ORDER BY avg_sala ASC</span><br><span class="line">  LIMIT 1</span><br><span class="line">  )t_emp_avg_sala</span><br><span class="line">WHERE d.`department_id`=t_emp_avg_sala.department_id</span><br></pre></td></tr></table></figure><h3 id="查询平均工资最高的job信息"><a href="#查询平均工资最高的job信息" class="headerlink" title="查询平均工资最高的job信息"></a>查询平均工资最高的job信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM <span class="built_in">jobs</span></span><br><span class="line">WHERE job_id=(</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT MAX(avg_sala)</span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">     )t_avg_sala</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> <span class="comment">#方式二 all</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM <span class="built_in">jobs</span></span><br><span class="line">WHERE job_id=(</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING AVG(salary) &gt;= ALL(</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三 limit</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM <span class="built_in">jobs</span></span><br><span class="line">WHERE job_id=(</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING AVG(salary) =(</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY avg_sala DESC</span><br><span class="line">LIMIT 1</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式四</span></span><br><span class="line">SELECT j.*</span><br><span class="line">FROM <span class="built_in">jobs</span> j,(</span><br><span class="line">SELECT job_id, AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY avg_sala DESC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">     )t_avg_sala</span><br><span class="line">WHERE j.`job_id`=t_avg_sala.job_id</span><br></pre></td></tr></table></figure><h3 id="查询-平均工资-高于公司平均工资-的-部门有哪些"><a href="#查询-平均工资-高于公司平均工资-的-部门有哪些" class="headerlink" title="查询 平均工资 高于公司平均工资 的 部门有哪些"></a>查询 平均工资 高于公司平均工资 的 部门有哪些</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IS NOT NULL</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary) &gt;(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h3 id="查询出公司-中所有的manager的详细信息"><a href="#查询出公司-中所有的manager的详细信息" class="headerlink" title="查询出公司 中所有的manager的详细信息"></a>查询出公司 中所有的manager的详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一 自连接</span></span><br><span class="line">SELECT  DISTINCT mgr.employee_id,mgr.last_name,mgr.job_id,mgr.department_id</span><br><span class="line">FROM employees emp JOIN employees mgr</span><br><span class="line">ON emp.manager_id=mgr.employee_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二 子查询</span></span><br><span class="line">SELECT employee_id,last_name,job_id,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN(</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees</span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三 EXISTS</span></span><br><span class="line">SELECT employee_id,last_name,job_id,department_id</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE  EXISTS (</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees e2</span><br><span class="line">WHERE e1.`employee_id`=e2.`manager_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="各个部门-最高工资中最低的那个部门的最低工资是多少"><a href="#各个部门-最高工资中最低的那个部门的最低工资是多少" class="headerlink" title="各个部门 最高工资中最低的那个部门的最低工资是多少"></a>各个部门 最高工资中最低的那个部门的最低工资是多少</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一 </span></span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MAX(salary)=(</span><br><span class="line">SELECT  MIN(max_sala)</span><br><span class="line">FROM (</span><br><span class="line">SELECT MAX(salary) max_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)t_max_sals</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二 all</span></span><br><span class="line"></span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MAX(salary) &lt;= ALL(</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">    FROM employees</span><br><span class="line">    GROUP BY department_id</span><br><span class="line">)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三 limit</span></span><br><span class="line"></span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MAX(salary) = (</span><br><span class="line">SELECT MAX(salary) max_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY max_sala ASC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式四 </span></span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees e,(</span><br><span class="line">  SELECT department_id,MAX(salary) max_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY max_sala ASC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">  ) t_max_sala_dep</span><br><span class="line">WHERE e.department_id =t_max_sala_dep.department_id</span><br></pre></td></tr></table></figure><h3 id="查询平均工资最高的部门的manager的信息-last-name-deparment-id-email-salary"><a href="#查询平均工资最高的部门的manager的信息-last-name-deparment-id-email-salary" class="headerlink" title="查询平均工资最高的部门的manager的信息 last_name deparment_id email salary"></a>查询平均工资最高的部门的manager的信息 last_name deparment_id email salary</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT last_name,department_id,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id = ANY (</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">SELECT MAX(avg_sala)</span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)t_avg_sala</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">SELECT last_name,department_id,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id = ANY (</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)&gt;= ALL(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三</span></span><br><span class="line">SELECT last_name,department_id,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id = ANY (</span><br><span class="line">SELECT  DISTINCT manager_id</span><br><span class="line">FROM employees e,(</span><br><span class="line">SELECT department_id,AVG(salary)avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY avg_sala DESC</span><br><span class="line">LIMIT 0,1</span><br><span class="line">  )t_max_avg_sala</span><br><span class="line">WHERE e.`department_id`=t_max_avg_sala.department_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="查询部门的部门号-其中不包括job-id是”ST-CLERK”的部门号"><a href="#查询部门的部门号-其中不包括job-id是”ST-CLERK”的部门号" class="headerlink" title="查询部门的部门号 其中不包括job_id是”ST_CLERK”的部门号"></a>查询部门的部门号 其中不包括job_id是”ST_CLERK”的部门号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id NOT IN(</span><br><span class="line"> SELECT DISTINCT department_id</span><br><span class="line"> FROM employees</span><br><span class="line"> WHERE job_id=<span class="string">&quot;ST_CLERK&quot;</span> </span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE NOT EXISTS (</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE d.`department_id`=e.`department_id`</span><br><span class="line">AND job_id=<span class="string">&quot;ST_CLERK&quot;</span> </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="选着所有没有管理者的员工的last-name"><a href="#选着所有没有管理者的员工的last-name" class="headerlink" title="选着所有没有管理者的员工的last_name"></a>选着所有没有管理者的员工的last_name</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM employees emp</span><br><span class="line">WHERE NOT EXISTS (</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees mgr</span><br><span class="line">WHERE emp.`manager_id`=mgr.`employee_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询员工号-姓名-雇佣时间-工资-其中员工的管理者为”De-Haan”"><a href="#查询员工号-姓名-雇佣时间-工资-其中员工的管理者为”De-Haan”" class="headerlink" title="查询员工号 姓名 雇佣时间 工资 其中员工的管理者为”De Haan”"></a>查询员工号 姓名 雇佣时间 工资 其中员工的管理者为”De Haan”</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">SELECT employee_id,last_name,hire_date,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IN (</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name=<span class="string">&quot;De Haan&quot;</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二 exists</span></span><br><span class="line">SELECT employee_id,last_name,hire_date,salary</span><br><span class="line">FROM employees emp</span><br><span class="line">WHERE EXISTS (</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees mgr</span><br><span class="line">WHERE emp.`manager_id`=mgr.`employee_id`</span><br><span class="line">AND mgr.last_name=<span class="string">&quot;De Haan&quot;</span></span><br><span class="line"> );  </span><br></pre></td></tr></table></figure><h3 id="查询部门中工资比-本部门平均工资-高的员工的工号姓名工资-相关子查询"><a href="#查询部门中工资比-本部门平均工资-高的员工的工号姓名工资-相关子查询" class="headerlink" title="查询部门中工资比 本部门平均工资 高的员工的工号姓名工资 相关子查询"></a>查询部门中工资比 本部门平均工资 高的员工的工号姓名工资 相关子查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一 from中声明子查询</span></span><br><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees e,(</span><br><span class="line">SELECT department_id,AVG(salary) avg_sala</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">)t_avg_sala</span><br><span class="line">WHERE e.`department_id`=t_avg_sala.department_id</span><br><span class="line">AND e.`salary`&gt;t_avg_sala.avg_sala</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二使用相关子查询</span></span><br><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE salary &gt;(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=e1.department_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询每个部门下的部门-人数大于5-的部门名-相关子查询"><a href="#查询每个部门下的部门-人数大于5-的部门名-相关子查询" class="headerlink" title="查询每个部门下的部门 人数大于5 的部门名 相关子查询"></a>查询每个部门下的部门 人数大于5 的部门名 相关子查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE 5&lt;(</span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE d.`department_id`=e.`department_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查询每个国家下的部门个数大于2的国家编号-相关子查询"><a href="#查询每个国家下的部门个数大于2的国家编号-相关子查询" class="headerlink" title="查询每个国家下的部门个数大于2的国家编号 相关子查询"></a>查询每个国家下的部门个数大于2的国家编号 相关子查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT country_id</span><br><span class="line">FROM locations l</span><br><span class="line">WHERE 2 &lt; (</span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE l.`location_id`=d.`location_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 基本select语句 学习笔记</title>
      <link href="/2018/12/10/MySql/"/>
      <url>/2018/12/10/MySql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SQL概述"><a href="#1-SQL概述" class="headerlink" title="1. SQL概述"></a>1. SQL概述</h2><h3 id="1-1-SQL背景知识"><a href="#1-1-SQL背景知识" class="headerlink" title="1.1 SQL背景知识"></a>1.1 SQL背景知识</h3><ul><li><p>1946 年，世界上第一台电脑诞生，如今，借由这台电脑发展起来的互联网已经自成江湖。在这几十年里，无数的技术、产业在这片江湖里沉浮，有的方兴未艾，有的已经几幕兴衰。但在这片浩荡的波动里，有一门技术从未消失，甚至“老当益壮”，那就是 SQL。</p><ul><li>45 年前，也就是 1974 年，IBM 研究员发布了一篇揭开数据库技术的论文《SEQUEL：一门结构化的英语查询语言》，直到今天这门结构化的查询语言并没有太大的变化，相比于其他语言，<code>SQL 的半衰期可以说是非常长</code>了。</li></ul></li><li><p>不论是前端工程师，还是后端算法工程师，都一定会和数据打交道，都需要了解如何又快又准确地提取自己想要的数据。更别提数据分析师了，他们的工作就是和数据打交道，整理不同的报告，以便指导业务决策。</p></li><li><p>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言，<code>与数据直接打交道</code>，由<code>IBM</code>上世纪70年代开发出来。后由美国国家标准局（ANSI）开始着手制定SQL标准，先后有<code>SQL-86</code>，<code>SQL-89</code>，<code>SQL-92</code>，<code>SQL-99</code>等标准。</p><ul><li>SQL 有两个重要的标准，分别是 SQL92 和 SQL99，它们分别代表了 92 年和 99 年颁布的 SQL 标准，我们今天使用的 SQL 语言依然遵循这些标准。</li></ul></li><li><p>不同的数据库生产厂商都支持SQL语句，但都有特有内容。</p></li></ul><h3 id="1-3-SQL-分类"><a href="#1-3-SQL-分类" class="headerlink" title="1.3 SQL 分类"></a>1.3 SQL 分类</h3><p>SQL语言在功能上主要分为如下3大类：</p><ul><li><p><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p><ul><li>主要的语句关键字包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li></ul></li><li><p><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p><ul><li>主要的语句关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等。</li><li><strong>SELECT是SQL语言的基础，最为重要。</strong></li></ul></li><li><p><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和安全级别。</p><ul><li>主要的语句关键字包括<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code>等。</li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p><p>还有单独将<code>COMMIT</code>、<code>ROLLBACK</code> 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote><h2 id="2-SQL语言的规则与规范"><a href="#2-SQL语言的规则与规范" class="headerlink" title="2. SQL语言的规则与规范"></a>2. SQL语言的规则与规范</h2><h3 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h3><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="2-2-SQL大小写规范-（建议遵守）"><a href="#2-2-SQL大小写规范-（建议遵守）" class="headerlink" title="2.2 SQL大小写规范 （建议遵守）"></a>2.2 SQL大小写规范 （建议遵守）</h3><ul><li><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></li><li><strong>MySQL 在 Linux 环境下是大小写敏感的</strong><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><strong>推荐采用统一的书写规范：</strong><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="2-3-注-释"><a href="#2-3-注-释" class="headerlink" title="2.3 注 释"></a>2.3 注 释</h3><p>可以使用如下格式的注释结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单行注释：#注释文字(MySQL特有的方式)</span><br><span class="line">单行注释：-- 注释文字(--后面必须包含一个空格。)</span><br><span class="line">多行注释：/* 注释文字  */</span><br></pre></td></tr></table></figure><h3 id="2-4-命名规则（暂时了解）"><a href="#2-4-命名规则（暂时了解）" class="headerlink" title="2.4 命名规则（暂时了解）"></a>2.4 命名规则（暂时了解）</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下两句是一样的，不区分大小写</span><br><span class="line">show databases;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line">#创建表格</span><br><span class="line">#create table student info(...); #表名错误，因为表名有空格</span><br><span class="line">create table student_info(...); </span><br><span class="line"></span><br><span class="line">#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了</span><br><span class="line">CREATE TABLE `order`(</span><br><span class="line">    id INT,</span><br><span class="line">    lname VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select id as &quot;编号&quot;, `name` as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略</span><br><span class="line">select id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;</span><br><span class="line">select id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="2-5-数据导入指令"><a href="#2-5-数据导入指令" class="headerlink" title="2.5 数据导入指令"></a>2.5 数据导入指令</h3><p>在命令行客户端登录mysql，使用source指令导入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; source d:\mysqldb.sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employees;</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field          | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| employee_id    | int(6)      | NO   | PRI | 0       |       |</span><br><span class="line">| first_name     | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| last_name      | varchar(25) | NO   |     | NULL    |       |</span><br><span class="line">| email          | varchar(25) | NO   | UNI | NULL    |       |</span><br><span class="line">| phone_number   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| hire_date      | date        | NO   |     | NULL    |       |</span><br><span class="line">| job_id         | varchar(10) | NO   | MUL | NULL    |       |</span><br><span class="line">| salary         | double(8,2) | YES  |     | NULL    |       |</span><br><span class="line">| commission_pct | double(2,2) | YES  |     | NULL    |       |</span><br><span class="line">| manager_id     | int(6)      | YES  | MUL | NULL    |       |</span><br><span class="line">| department_id  | int(4)      | YES  | MUL | NULL    |       |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-基本的SELECT语句"><a href="#3-基本的SELECT语句" class="headerlink" title="3. 基本的SELECT语句"></a>3. 基本的SELECT语句</h2><h3 id="3-0-SELECT…"><a href="#3-0-SELECT…" class="headerlink" title="3.0 SELECT…"></a>3.0 SELECT…</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 1; #没有任何子句</span><br><span class="line">SELECT 9/2; #没有任何子句</span><br></pre></td></tr></table></figure><h3 id="3-1-SELECT-…-FROM"><a href="#3-1-SELECT-…-FROM" class="headerlink" title="3.1 SELECT … FROM"></a>3.1 SELECT … FROM</h3><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   标识选择哪些列</span><br><span class="line"><span class="keyword">FROM</span>     标识从哪个表中选择</span><br></pre></td></tr></table></figure><ul><li>选择全部列：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   departments;</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符‘*’。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，不推荐你直接使用<code>SELECT *</code>进行查询。</p></blockquote><ul><li>选择特定的列：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, location_id</span><br><span class="line"><span class="keyword">FROM</span>   departments;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL中的SQL语句是不区分大小写的，因此SELECT和select的作用是相同的，但是，许多开发人员习惯将关键字大写、数据列和表名小写，读者也应该养成一个良好的编程习惯，这样写出来的代码更容易阅读和维护。</p></blockquote><h3 id="3-2-列的别名"><a href="#3-2-列的别名" class="headerlink" title="3.2 列的别名"></a>3.2 列的别名</h3><ul><li><p>重命名一个列</p></li><li><p>便于计算</p></li><li><p>紧跟列名，也可以<strong>在列名和别名之间加入关键字AS，别名使用双引号</strong>，以便在别名中包含空格或特殊的字符并区分大小写。</p></li><li><p>AS 可以省略</p></li><li><p>建议别名简短，见名知意</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name AS name, commission_pct comm</span><br><span class="line">FROM   employees;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name &quot;Name&quot;, salary*12 &quot;Annual Salary&quot;</span><br><span class="line">FROM   employees;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-去除重复行"><a href="#3-3-去除重复行" class="headerlink" title="3.3 去除重复行"></a>3.3 去除重复行</h3><p>默认情况下，查询会返回全部行，包括重复行。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure><p><strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure><p>针对于：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT department_id,salary </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>这里有两点需要注意：</p><ol><li>DISTINCT 需要放到所有列名的前面，如果写成<code>SELECT salary, DISTINCT department_id FROM employees</code>会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重，你能看到最后的结果是 74 条，因为这 74 个部门id不同，都有 salary 这个属性值。如果你想要看都有哪些不同的部门（department_id），只需要写<code>DISTINCT department_id</code>即可，后面不需要再加其他的列名了。</li></ol><h3 id="3-4-空值参与运算"><a href="#3-4-空值参与运算" class="headerlink" title="3.4 空值参与运算"></a>3.4 空值参与运算</h3><ul><li>所有运算符或列值遇到null值，运算的结果都为null</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary,commission_pct,</span><br><span class="line"><span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) &quot;annual_sal&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这里你一定要注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p><h3 id="3-5-着重号"><a href="#3-5-着重号" class="headerlink" title="3.5 着重号"></a>3.5 着重号</h3><ul><li>错误的</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM ORDER;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;ORDER&#x27; at line 1</span><br></pre></td></tr></table></figure><ul><li>正确的</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `ORDER`;</span><br><span class="line">+----------+------------+</span><br><span class="line">| order_id | order_name |</span><br><span class="line">+----------+------------+</span><br><span class="line">|        1 | shkstart   |</span><br><span class="line">|        2 | tomcat     |</span><br><span class="line">|        3 | dubbo      |</span><br><span class="line">+----------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM `order`;</span><br><span class="line">+----------+------------+</span><br><span class="line">| order_id | order_name |</span><br><span class="line">+----------+------------+</span><br><span class="line">|        1 | shkstart   |</span><br><span class="line">|        2 | tomcat     |</span><br><span class="line">|        3 | dubbo      |</span><br><span class="line">+----------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>结论</li></ul><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在SQL语句中使用一对``（着重号）引起来。<br>####</p><h3 id="3-6-5、查询常数"><a href="#3-6-5、查询常数" class="headerlink" title="3.6 5、查询常数"></a>3.6 5、查询常数</h3><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p><p>你可能会问为什么我们还要对常数进行查询呢？</p><p>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</p><p>比如说，我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段<code>corporation</code>，这个字段固定值为“尚硅谷”，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT &#x27;尚硅谷&#x27; as corporation, last_name FROM employees;</span><br></pre></td></tr></table></figure><h2 id="4-显示表结构"><a href="#4-显示表结构" class="headerlink" title="4. 显示表结构"></a>4. 显示表结构</h2><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESCRIBE employees;</span><br><span class="line">或</span><br><span class="line">DESC employees;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employees;</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field          | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| employee_id    | int(6)      | NO   | PRI | 0       |       |</span><br><span class="line">| first_name     | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| last_name      | varchar(25) | NO   |     | NULL    |       |</span><br><span class="line">| email          | varchar(25) | NO   | UNI | NULL    |       |</span><br><span class="line">| phone_number   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| hire_date      | date        | NO   |     | NULL    |       |</span><br><span class="line">| job_id         | varchar(10) | NO   | MUL | NULL    |       |</span><br><span class="line">| salary         | double(8,2) | YES  |     | NULL    |       |</span><br><span class="line">| commission_pct | double(2,2) | YES  |     | NULL    |       |</span><br><span class="line">| manager_id     | int(6)      | YES  | MUL | NULL    |       |</span><br><span class="line">| department_id  | int(4)      | YES  | MUL | NULL    |       |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>其中，各个字段的含义分别解释如下：</p><ul><li>Field：表示字段名称。 </li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一部分；MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，那么值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><h2 id="5-过滤数据"><a href="#5-过滤数据" class="headerlink" title="5. 过滤数据"></a>5. 过滤数据</h2><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段1,字段2</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 过滤条件</span><br></pre></td></tr></table></figure><ul><li>使用WHERE 子句，将不满足条件的行过滤掉</li><li><strong>WHERE子句紧随 FROM子句</strong></li></ul></li><li><p>举例</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id</span><br><span class="line"><span class="keyword">FROM</span>   employees</span><br><span class="line"><span class="keyword">WHERE</span>  department_id <span class="operator">=</span> <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题切换为butterfly</title>
      <link href="/2018/10/22/10.22/"/>
      <url>/2018/10/22/10.22/</url>
      
        <content type="html"><![CDATA[<pre><code>上一个主题式 fluid 感觉不是很酷炫,这次换个butterfly 试试看,效果还是不错的</code></pre>]]></content>
      
      
      <categories>
          
          <category> 主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烦</title>
      <link href="/2018/10/12/10.18/"/>
      <url>/2018/10/12/10.18/</url>
      
        <content type="html"><![CDATA[<h1 id="生活明朗-万物可爱"><a href="#生活明朗-万物可爱" class="headerlink" title="生活明朗  万物可爱"></a>生活明朗  万物可爱</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/01/hello-world/"/>
      <url>/2018/05/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客,这是我的第一篇博客,hexok 和butterfly搭建的.</p><h2 id="Quick-Start-语句使用"><a href="#Quick-Start-语句使用" class="headerlink" title="Quick Start 语句使用"></a>Quick Start 语句使用</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
